#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  (asdf:load-asd (truename "../../gtk4.asd"))
  #+quicklisp(ql:quickload '(:gtk4
                             :gtk4/swig/cairo
                             :gtk4/swig/gtkwidget
                             :gtk4/swig/pango_layout
                             :gtk4/swig/pango_types
                             :gtk4/swig/pango_cairo
                             ) :silent t)
  )

(defpackage :ros.script.rotated.3863942106
  (:use :cl :gtk4))
(in-package :ros.script.rotated.3863942106)

(defparameter *text* "I ♥ ほげ")
(defparameter *font* "Serif 18")
(defparameter *radius* 150)
(defparameter *n-words* 7)

(defun fancy-shape-renderer (cr attr do_path data)
  (declare (ignorable cr attr do_path data))
  (print :fancy-shape-renderer cr attr do_path data)
  (terpri)
  (force-output)
  )

(cffi:defcallback fancy-shape-renderer% :void
    ((cr :pointer)
     (attr :pointer)
     (do_path :int)
     (data :int))
  (funcall 'fancy-shape-renderer cr attr do_path data))

(defun create-fancy-attr-list-for-layout (layout-ptr)
  (print :!!!)
  (let (attrs metrics ascent context layout ink_rect logical_rect)
    #| Get font metrics and prepare fancy shape size |#
    (setf metrics
          (let ((context-ptr (gtk4/pango_layout:pango-layout-get-context layout-ptr)))
            (setf context (gir:build-object-ptr (gir:nget *pango* "Context") context-ptr))
            (setf layout (gir:build-object-ptr (gir:nget *pango* "Layout") layout-ptr))
            (gir:invoke (context "get_metrics")
                        (gir:invoke (layout "get_font_description"))
                        (cffi:null-pointer))))
    (setf ascent (gir:invoke (metrics "get_ascent")))
    (cffi:with-foreign-objects ((ink-rect 'gtk4/pango_types:-pango-rectangle)
                                (logical-rect 'gtk4/pango_types:-pango-rectangle))
      (cffi:foreign-slot-names '(:struct gtk4/pango_types:-pango-rectangle))
      (let ((rect '(:struct gtk4/pango_types:-pango-rectangle))
            (x 'gtk4/pango_types:x)
            (y 'gtk4/pango_types:y)
            (width 'gtk4/pango_types:width)
            (height 'gtk4/pango_types:height))
        (setf (cffi:foreign-slot-value logical-rect rect x) 0
              (cffi:foreign-slot-value logical-rect rect width) ascent
              (cffi:foreign-slot-value logical-rect rect y) (- ascent)
              (cffi:foreign-slot-value logical-rect rect height) ascent
              (cffi:mem-ref ink-rect rect) (cffi:mem-ref logical-rect rect))
        (gir:invoke (metrics "unref"))
        (let ((attrs (gir:invoke (*pango* "AttrList" :new))))
          (print
           (list :ink-rect
                 (cffi:foreign-slot-value ink-rect rect x)
                 (cffi:foreign-slot-value ink-rect rect width)
                 (cffi:foreign-slot-value ink-rect rect y)
                 (cffi:foreign-slot-value ink-rect rect height)
                 :logical-rect
                 (cffi:foreign-slot-value logical-rect rect x)
                 (cffi:foreign-slot-value logical-rect rect width)
                 (cffi:foreign-slot-value logical-rect rect y)
                 (cffi:foreign-slot-value logical-rect rect height)
                 :ink-rect ink-rect
                 :size-of-rect
                 (cffi:foreign-type-size rect)
                 ))
          attrs
          )))))

(defun rotated-text-draw (#|GtkDrawingArea|# da-ptr #|cairo_t|# cr-ptr width height user-data)
  (declare (ignorable user-data))
  (let ((da (gir:build-object-ptr (gir:nget *gtk* "DrawingArea") da-ptr))
        (cr (gir:build-object-ptr (gir:nget *pangocairo* "Context") cr-ptr)))
    #+debug-print(print (list :cr cr :cr-ptr cr-ptr))
    #+debug-print(print (list :GtkDrawingArea da))
    (let ((RADIUS 150)
          #|/* Create a cairo context and set up a transformation matrix so that the user
          | space coordinates for the centered square where we draw are [-RADIUS, RADIUS],
          | [-RADIUS, RADIUS].
          | We first center, then change the scale. |#
          (device-radius (/ (min width height) 2))
          pattern context-ptr layout-ptr layout desc)
      (gtk4/cairo:cairo-translate cr-ptr
                                  (coerce (+ device-radius (ash (floor (- width  (* 2 device-radius))) -1)) 'double-float)
                                  (coerce (+ device-radius (ash (floor (- height (* 2 device-radius))) -1)) 'double-float))
      (gtk4/cairo:cairo-scale cr-ptr
                              (coerce (floor device-radius radius) 'double-float)
                              (coerce  (floor device-radius radius) 'double-float))
      #| Create and a subtle gradient source and use it.|#
      (setf pattern (gtk4/cairo:cairo-pattern-create-linear (coerce (- radius) 'double-float)
                                                            (coerce (- radius) 'double-float)
                                                            (coerce radius 'double-float)
                                                            (coerce  radius 'double-float)))
      (gtk4/cairo:cairo-pattern-add-color-stop-rgb pattern  0.0d0  0.5d0 0.0d0 0.0d0)
      (gtk4/cairo:cairo-pattern-add-color-stop-rgb pattern  1.0d0  0.0d0 0.0d0 0.5d0)
      (gtk4/cairo:cairo-set-source cr-ptr pattern)
      #| Create a PangoContext and set up our shape renderer |#
      (setf context-ptr (gtk4/gtkwidget:gtk-widget-create-pango-context da-ptr))
      #+debug-print(print (list :context! context-ptr))
      (gtk4/swig/pango_cairo:pango-cairo-context-set-shape-renderer
       context-ptr
       (cffi:callback fancy-shape-renderer%)
       (cffi:null-pointer)
       (cffi:null-pointer))

      #| Create a PangoLayout, set the text, font, and attributes |#
      (setf layout-ptr (gtk4/pango_layout:pango-layout-new context-ptr))
      #+debug-print(print (list :layout layout-ptr))
      (setf layout (gir:build-object-ptr (gir:nget *pango* "Layout") layout-ptr))
      (gir:invoke (layout "set_text") *text* -1)
      (setf desc (gir:invoke (*pango* "font_description_from_string") *font*))
      #+debug-print(print (list :desc desc))
      (gir:invoke (layout "set_font_description") desc)
      (let* ((attrs (create-fancy-attr-list-for-layout layout-ptr))
             (attrs-ptr (gir::this-of attrs)))
        (gtk4/pango_layout:pango-layout-set-attributes layout-ptr attrs-ptr)
        (gir:invoke (attrs "unref")))

      #| Draw the layout N_WORDS times in a circle |#
      (loop for i from 1 to *n-words*
            do
               (cffi:with-foreign-objects
                   ((layout-width :int)
                    (layout-height :int))
                 #| Inform Pango to re-layout the text with the new transformation matrix |#
                 (gtk4/pango_cairo:pango-cairo-update-layout cr-ptr layout-ptr)

                 (gtk4/pango_layout:pango-layout-get-size layout-ptr layout-width layout-height)
                 (gtk4/cairo:cairo-move-to cr-ptr
                                           (coerce (*    0) 'double-float)
                                           (coerce (* -100) 'double-float))
                 (gtk4/pango_cairo:pango-cairo-show-layout cr-ptr layout-ptr)
                 #+debug-print
                 (print (list :width (cffi:mem-aref layout-width :int)
                              :height (cffi:mem-aref layout-height :int)))
                 #| Rotate for the next turn |#
                 (gtk4/cairo:cairo-rotate cr-ptr  (coerce (/ (* pi 2) *n-words*) 'double-float))
                 ))
      #| free the objects we created |#
      (gir:invoke (desc "free"))
      (gir:invoke (layout "unref"))
      (gir::g-object-unref context-ptr)
      (gtk4/cairo:cairo-pattern-destroy pattern))))

(cffi:defcallback rotated-text-draw% :void
    ((drawing-area :pointer) 
     (cairo :pointer)
     (width :int)
     (height :int)
     (user-data :pointer))
  (funcall 'rotated-text-draw drawing-area cairo width height user-data))

(let ((window))
  (defun do-rotated-text (app)
    (unless window
      (setf window (gir:invoke (*gtk* "ApplicationWindow" :new) app))
      ;;(gir:invoke (*pango* "Rectangle" :new))
      (setf (gir:property window :title) "Rotated Text")
      (gir:invoke (window :set-default-size)
                  (* 4 *radius*)
                  (* 2 *radius*))
      ;;(gir:invoke (window :add-weak-pointer) window)
      (let ((box (gir:invoke (*gtk* "Box" :new) (gir:nget *gtk* "Orientation" :horizontal) 0))
            (drawing-area))
        (gir:invoke (box :set_homogeneous) t)
        (gir:invoke (window :set-child) box)
        ;; Add a drawing area 
        (setf drawing-area (gir:invoke (*gtk* "DrawingArea" :new)))
        #+debug-print(print (list :drawing-area drawing-area))
        (gir:invoke (box "append") drawing-area)
        (gir:invoke (drawing-area "add_css_class") "view")
        (gir:invoke (drawing-area "set_draw_func")
                    (cffi:callback rotated-text-draw%)
                    (cffi:null-pointer)
                    (cffi:null-pointer))))
    window))

(defun activate (app)
  (let ((window (do-rotated-text app)))
    (gir:invoke (window :present))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (gtk4:setup-namespace)
  (gtk4:init)
  (gir:invoke (*gtk* :init))
  (let ((app (gir:invoke (*gtk* "Application" :new)
                         "org.gtk.example"
                         (gir:nget *gio* "ApplicationFlags" :flags-none))))
    (gir:connect app :activate #'activate)
    (let ((status (gir:invoke (app :run) (cons (namestring *load-truename*) argv))))
      status)))

;;; vim: set ft=lisp lisp:
