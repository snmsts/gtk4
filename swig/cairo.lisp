;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 4.0.2
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(uiop/package:define-package :gtk4/swig/cairo
  (:use :cl :cffi :gtk4/swig-wrap)
  (:nicknames :gtk4/cairo)
  (:export
   ))
(in-package :gtk4/swig/cairo)

(define-foreign-library libcairo
  (:win32 "libcairo-2")
  (t (:default "libcairo")))

(unless (foreign-library-loaded-p 'libcairo)
  (use-foreign-library libcairo))

(define-constant #.(swig-lispify "CAIRO_VERSION" 'constant) (cl:+ (* 1 10000) (* 16 100) (* 0 1)))

(cl:export '#.(swig-lispify "CAIRO_VERSION" 'constant))

(define-constant #.(swig-lispify "CAIRO_VERSION_STRING" 'constant) "1.16.0")

(cl:export '#.(swig-lispify "CAIRO_VERSION_STRING" 'constant))

(cffi:defcfun ("cairo_version" #.(swig-lispify "cairo_version" 'function)) :int)

(cl:export '#.(swig-lispify "cairo_version" 'function))

(cffi:defcfun ("cairo_version_string" #.(swig-lispify "cairo_version_string" 'function)) :string)

(cl:export '#.(swig-lispify "cairo_version_string" 'function))

(cffi:defcstruct #.(swig-lispify "cairo_matrix_t" 'classname)
	(#.(swig-lispify "xx" 'slotname) :double)
	(#.(swig-lispify "yx" 'slotname) :double)
	(#.(swig-lispify "xy" 'slotname) :double)
	(#.(swig-lispify "yy" 'slotname) :double)
	(#.(swig-lispify "x0" 'slotname) :double)
	(#.(swig-lispify "y0" 'slotname) :double))

(cl:export '#.(swig-lispify "cairo_matrix_t" 'classname))

(cl:export '#.(swig-lispify "xx" 'slotname))

(cl:export '#.(swig-lispify "yx" 'slotname))

(cl:export '#.(swig-lispify "xy" 'slotname))

(cl:export '#.(swig-lispify "yy" 'slotname))

(cl:export '#.(swig-lispify "x0" 'slotname))

(cl:export '#.(swig-lispify "y0" 'slotname))

(cffi:defcstruct #.(swig-lispify "cairo_user_data_key_t" 'classname)
	(#.(swig-lispify "unused" 'slotname) :int))

(cl:export '#.(swig-lispify "cairo_user_data_key_t" 'classname))

(cl:export '#.(swig-lispify "unused" 'slotname))

(cffi:defcenum #.(swig-lispify "cairo_status_t" 'enumname)
	(#.(swig-lispify "CAIRO_STATUS_SUCCESS" 'enumvalue :keyword) #.0)
	#.(swig-lispify "CAIRO_STATUS_NO_MEMORY" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_INVALID_RESTORE" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_INVALID_POP_GROUP" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_NO_CURRENT_POINT" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_INVALID_MATRIX" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_INVALID_STATUS" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_NULL_POINTER" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_INVALID_STRING" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_INVALID_PATH_DATA" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_READ_ERROR" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_WRITE_ERROR" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_SURFACE_FINISHED" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_SURFACE_TYPE_MISMATCH" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_PATTERN_TYPE_MISMATCH" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_INVALID_CONTENT" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_INVALID_FORMAT" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_INVALID_VISUAL" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_FILE_NOT_FOUND" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_INVALID_DASH" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_INVALID_DSC_COMMENT" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_INVALID_INDEX" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_CLIP_NOT_REPRESENTABLE" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_TEMP_FILE_ERROR" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_INVALID_STRIDE" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_FONT_TYPE_MISMATCH" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_USER_FONT_IMMUTABLE" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_USER_FONT_ERROR" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_NEGATIVE_COUNT" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_INVALID_CLUSTERS" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_INVALID_SLANT" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_INVALID_WEIGHT" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_INVALID_SIZE" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_DEVICE_TYPE_MISMATCH" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_DEVICE_ERROR" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_INVALID_MESH_CONSTRUCTION" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_DEVICE_FINISHED" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_JBIG2_GLOBAL_MISSING" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_PNG_ERROR" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_FREETYPE_ERROR" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_WIN32_GDI_ERROR" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_TAG_ERROR" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_STATUS_LAST_STATUS" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "cairo_status_t" 'enumname))

(cffi:defcenum #.(swig-lispify "cairo_content_t" 'enumname)
	(#.(swig-lispify "CAIRO_CONTENT_COLOR" 'enumvalue :keyword) #.#x1000)
	(#.(swig-lispify "CAIRO_CONTENT_ALPHA" 'enumvalue :keyword) #.#x2000)
	(#.(swig-lispify "CAIRO_CONTENT_COLOR_ALPHA" 'enumvalue :keyword) #.#x3000))

(cl:export '#.(swig-lispify "cairo_content_t" 'enumname))

(cffi:defcenum #.(swig-lispify "cairo_format_t" 'enumname)
	(#.(swig-lispify "CAIRO_FORMAT_INVALID" 'enumvalue :keyword) #.-1)
	(#.(swig-lispify "CAIRO_FORMAT_ARGB32" 'enumvalue :keyword) #.0)
	(#.(swig-lispify "CAIRO_FORMAT_RGB24" 'enumvalue :keyword) #.1)
	(#.(swig-lispify "CAIRO_FORMAT_A8" 'enumvalue :keyword) #.2)
	(#.(swig-lispify "CAIRO_FORMAT_A1" 'enumvalue :keyword) #.3)
	(#.(swig-lispify "CAIRO_FORMAT_RGB16_565" 'enumvalue :keyword) #.4)
	(#.(swig-lispify "CAIRO_FORMAT_RGB30" 'enumvalue :keyword) #.5))

(cl:export '#.(swig-lispify "cairo_format_t" 'enumname))

(cffi:defcstruct #.(swig-lispify "cairo_rectangle_int_t" 'classname)
	(#.(swig-lispify "x" 'slotname) :int)
	(#.(swig-lispify "y" 'slotname) :int)
	(#.(swig-lispify "width" 'slotname) :int)
	(#.(swig-lispify "height" 'slotname) :int))

(cl:export '#.(swig-lispify "cairo_rectangle_int_t" 'classname))

(cl:export '#.(swig-lispify "x" 'slotname))

(cl:export '#.(swig-lispify "y" 'slotname))

(cl:export '#.(swig-lispify "width" 'slotname))

(cl:export '#.(swig-lispify "height" 'slotname))

(cffi:defcfun ("cairo_create" #.(swig-lispify "cairo_create" 'function)) :pointer
  (target :pointer))

(cl:export '#.(swig-lispify "cairo_create" 'function))

(cffi:defcfun ("cairo_reference" #.(swig-lispify "cairo_reference" 'function)) :pointer
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_reference" 'function))

(cffi:defcfun ("cairo_destroy" #.(swig-lispify "cairo_destroy" 'function)) :void
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_destroy" 'function))

(cffi:defcfun ("cairo_get_reference_count" #.(swig-lispify "cairo_get_reference_count" 'function)) :unsigned-int
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_get_reference_count" 'function))

(cffi:defcfun ("cairo_get_user_data" #.(swig-lispify "cairo_get_user_data" 'function)) :pointer
  (cr :pointer)
  (key :pointer))

(cl:export '#.(swig-lispify "cairo_get_user_data" 'function))

(cffi:defcfun ("cairo_set_user_data" #.(swig-lispify "cairo_set_user_data" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (cr :pointer)
  (key :pointer)
  (user_data :pointer)
  (destroy :pointer))

(cl:export '#.(swig-lispify "cairo_set_user_data" 'function))

(cffi:defcfun ("cairo_save" #.(swig-lispify "cairo_save" 'function)) :void
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_save" 'function))

(cffi:defcfun ("cairo_restore" #.(swig-lispify "cairo_restore" 'function)) :void
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_restore" 'function))

(cffi:defcfun ("cairo_push_group" #.(swig-lispify "cairo_push_group" 'function)) :void
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_push_group" 'function))

(cffi:defcfun ("cairo_push_group_with_content" #.(swig-lispify "cairo_push_group_with_content" 'function)) :void
  (cr :pointer)
  (content #.(swig-lispify "cairo_content_t" 'enumname)))

(cl:export '#.(swig-lispify "cairo_push_group_with_content" 'function))

(cffi:defcfun ("cairo_pop_group" #.(swig-lispify "cairo_pop_group" 'function)) :pointer
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_pop_group" 'function))

(cffi:defcfun ("cairo_pop_group_to_source" #.(swig-lispify "cairo_pop_group_to_source" 'function)) :void
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_pop_group_to_source" 'function))

(cffi:defcenum #.(swig-lispify "cairo_operator_t" 'enumname)
	#.(swig-lispify "CAIRO_OPERATOR_CLEAR" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_OPERATOR_SOURCE" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_OPERATOR_OVER" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_OPERATOR_IN" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_OPERATOR_OUT" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_OPERATOR_ATOP" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_OPERATOR_DEST" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_OPERATOR_DEST_OVER" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_OPERATOR_DEST_IN" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_OPERATOR_DEST_OUT" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_OPERATOR_DEST_ATOP" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_OPERATOR_XOR" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_OPERATOR_ADD" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_OPERATOR_SATURATE" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_OPERATOR_MULTIPLY" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_OPERATOR_SCREEN" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_OPERATOR_OVERLAY" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_OPERATOR_DARKEN" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_OPERATOR_LIGHTEN" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_OPERATOR_COLOR_DODGE" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_OPERATOR_COLOR_BURN" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_OPERATOR_HARD_LIGHT" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_OPERATOR_SOFT_LIGHT" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_OPERATOR_DIFFERENCE" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_OPERATOR_EXCLUSION" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_OPERATOR_HSL_HUE" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_OPERATOR_HSL_SATURATION" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_OPERATOR_HSL_COLOR" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_OPERATOR_HSL_LUMINOSITY" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "cairo_operator_t" 'enumname))

(cffi:defcfun ("cairo_set_operator" #.(swig-lispify "cairo_set_operator" 'function)) :void
  (cr :pointer)
  (op #.(swig-lispify "cairo_operator_t" 'enumname)))

(cl:export '#.(swig-lispify "cairo_set_operator" 'function))

(cffi:defcfun ("cairo_set_source" #.(swig-lispify "cairo_set_source" 'function)) :void
  (cr :pointer)
  (source :pointer))

(cl:export '#.(swig-lispify "cairo_set_source" 'function))

(cffi:defcfun ("cairo_set_source_rgb" #.(swig-lispify "cairo_set_source_rgb" 'function)) :void
  (cr :pointer)
  (red :double)
  (green :double)
  (blue :double))

(cl:export '#.(swig-lispify "cairo_set_source_rgb" 'function))

(cffi:defcfun ("cairo_set_source_rgba" #.(swig-lispify "cairo_set_source_rgba" 'function)) :void
  (cr :pointer)
  (red :double)
  (green :double)
  (blue :double)
  (alpha :double))

(cl:export '#.(swig-lispify "cairo_set_source_rgba" 'function))

(cffi:defcfun ("cairo_set_source_surface" #.(swig-lispify "cairo_set_source_surface" 'function)) :void
  (cr :pointer)
  (surface :pointer)
  (x :double)
  (y :double))

(cl:export '#.(swig-lispify "cairo_set_source_surface" 'function))

(cffi:defcfun ("cairo_set_tolerance" #.(swig-lispify "cairo_set_tolerance" 'function)) :void
  (cr :pointer)
  (tolerance :double))

(cl:export '#.(swig-lispify "cairo_set_tolerance" 'function))

(cffi:defcenum #.(swig-lispify "cairo_antialias_t" 'enumname)
	#.(swig-lispify "CAIRO_ANTIALIAS_DEFAULT" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_ANTIALIAS_NONE" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_ANTIALIAS_GRAY" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_ANTIALIAS_SUBPIXEL" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_ANTIALIAS_FAST" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_ANTIALIAS_GOOD" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_ANTIALIAS_BEST" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "cairo_antialias_t" 'enumname))

(cffi:defcfun ("cairo_set_antialias" #.(swig-lispify "cairo_set_antialias" 'function)) :void
  (cr :pointer)
  (antialias #.(swig-lispify "cairo_antialias_t" 'enumname)))

(cl:export '#.(swig-lispify "cairo_set_antialias" 'function))

(cffi:defcenum #.(swig-lispify "cairo_fill_rule_t" 'enumname)
	#.(swig-lispify "CAIRO_FILL_RULE_WINDING" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_FILL_RULE_EVEN_ODD" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "cairo_fill_rule_t" 'enumname))

(cffi:defcfun ("cairo_set_fill_rule" #.(swig-lispify "cairo_set_fill_rule" 'function)) :void
  (cr :pointer)
  (fill_rule #.(swig-lispify "cairo_fill_rule_t" 'enumname)))

(cl:export '#.(swig-lispify "cairo_set_fill_rule" 'function))

(cffi:defcfun ("cairo_set_line_width" #.(swig-lispify "cairo_set_line_width" 'function)) :void
  (cr :pointer)
  (width :double))

(cl:export '#.(swig-lispify "cairo_set_line_width" 'function))

(cffi:defcenum #.(swig-lispify "cairo_line_cap_t" 'enumname)
	#.(swig-lispify "CAIRO_LINE_CAP_BUTT" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_LINE_CAP_ROUND" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_LINE_CAP_SQUARE" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "cairo_line_cap_t" 'enumname))

(cffi:defcfun ("cairo_set_line_cap" #.(swig-lispify "cairo_set_line_cap" 'function)) :void
  (cr :pointer)
  (line_cap #.(swig-lispify "cairo_line_cap_t" 'enumname)))

(cl:export '#.(swig-lispify "cairo_set_line_cap" 'function))

(cffi:defcenum #.(swig-lispify "cairo_line_join_t" 'enumname)
	#.(swig-lispify "CAIRO_LINE_JOIN_MITER" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_LINE_JOIN_ROUND" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_LINE_JOIN_BEVEL" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "cairo_line_join_t" 'enumname))

(cffi:defcfun ("cairo_set_line_join" #.(swig-lispify "cairo_set_line_join" 'function)) :void
  (cr :pointer)
  (line_join #.(swig-lispify "cairo_line_join_t" 'enumname)))

(cl:export '#.(swig-lispify "cairo_set_line_join" 'function))

(cffi:defcfun ("cairo_set_dash" #.(swig-lispify "cairo_set_dash" 'function)) :void
  (cr :pointer)
  (dashes :pointer)
  (num_dashes :int)
  (offset :double))

(cl:export '#.(swig-lispify "cairo_set_dash" 'function))

(cffi:defcfun ("cairo_set_miter_limit" #.(swig-lispify "cairo_set_miter_limit" 'function)) :void
  (cr :pointer)
  (limit :double))

(cl:export '#.(swig-lispify "cairo_set_miter_limit" 'function))

(cffi:defcfun ("cairo_translate" #.(swig-lispify "cairo_translate" 'function)) :void
  (cr :pointer)
  (tx :double)
  (ty :double))

(cl:export '#.(swig-lispify "cairo_translate" 'function))

(cffi:defcfun ("cairo_scale" #.(swig-lispify "cairo_scale" 'function)) :void
  (cr :pointer)
  (sx :double)
  (sy :double))

(cl:export '#.(swig-lispify "cairo_scale" 'function))

(cffi:defcfun ("cairo_rotate" #.(swig-lispify "cairo_rotate" 'function)) :void
  (cr :pointer)
  (angle :double))

(cl:export '#.(swig-lispify "cairo_rotate" 'function))

(cffi:defcfun ("cairo_transform" #.(swig-lispify "cairo_transform" 'function)) :void
  (cr :pointer)
  (matrix :pointer))

(cl:export '#.(swig-lispify "cairo_transform" 'function))

(cffi:defcfun ("cairo_set_matrix" #.(swig-lispify "cairo_set_matrix" 'function)) :void
  (cr :pointer)
  (matrix :pointer))

(cl:export '#.(swig-lispify "cairo_set_matrix" 'function))

(cffi:defcfun ("cairo_identity_matrix" #.(swig-lispify "cairo_identity_matrix" 'function)) :void
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_identity_matrix" 'function))

(cffi:defcfun ("cairo_user_to_device" #.(swig-lispify "cairo_user_to_device" 'function)) :void
  (cr :pointer)
  (x :pointer)
  (y :pointer))

(cl:export '#.(swig-lispify "cairo_user_to_device" 'function))

(cffi:defcfun ("cairo_user_to_device_distance" #.(swig-lispify "cairo_user_to_device_distance" 'function)) :void
  (cr :pointer)
  (dx :pointer)
  (dy :pointer))

(cl:export '#.(swig-lispify "cairo_user_to_device_distance" 'function))

(cffi:defcfun ("cairo_device_to_user" #.(swig-lispify "cairo_device_to_user" 'function)) :void
  (cr :pointer)
  (x :pointer)
  (y :pointer))

(cl:export '#.(swig-lispify "cairo_device_to_user" 'function))

(cffi:defcfun ("cairo_device_to_user_distance" #.(swig-lispify "cairo_device_to_user_distance" 'function)) :void
  (cr :pointer)
  (dx :pointer)
  (dy :pointer))

(cl:export '#.(swig-lispify "cairo_device_to_user_distance" 'function))

(cffi:defcfun ("cairo_new_path" #.(swig-lispify "cairo_new_path" 'function)) :void
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_new_path" 'function))

(cffi:defcfun ("cairo_move_to" #.(swig-lispify "cairo_move_to" 'function)) :void
  (cr :pointer)
  (x :double)
  (y :double))

(cl:export '#.(swig-lispify "cairo_move_to" 'function))

(cffi:defcfun ("cairo_new_sub_path" #.(swig-lispify "cairo_new_sub_path" 'function)) :void
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_new_sub_path" 'function))

(cffi:defcfun ("cairo_line_to" #.(swig-lispify "cairo_line_to" 'function)) :void
  (cr :pointer)
  (x :double)
  (y :double))

(cl:export '#.(swig-lispify "cairo_line_to" 'function))

(cffi:defcfun ("cairo_curve_to" #.(swig-lispify "cairo_curve_to" 'function)) :void
  (cr :pointer)
  (x1 :double)
  (y1 :double)
  (x2 :double)
  (y2 :double)
  (x3 :double)
  (y3 :double))

(cl:export '#.(swig-lispify "cairo_curve_to" 'function))

(cffi:defcfun ("cairo_arc" #.(swig-lispify "cairo_arc" 'function)) :void
  (cr :pointer)
  (xc :double)
  (yc :double)
  (radius :double)
  (angle1 :double)
  (angle2 :double))

(cl:export '#.(swig-lispify "cairo_arc" 'function))

(cffi:defcfun ("cairo_arc_negative" #.(swig-lispify "cairo_arc_negative" 'function)) :void
  (cr :pointer)
  (xc :double)
  (yc :double)
  (radius :double)
  (angle1 :double)
  (angle2 :double))

(cl:export '#.(swig-lispify "cairo_arc_negative" 'function))

(cffi:defcfun ("cairo_rel_move_to" #.(swig-lispify "cairo_rel_move_to" 'function)) :void
  (cr :pointer)
  (dx :double)
  (dy :double))

(cl:export '#.(swig-lispify "cairo_rel_move_to" 'function))

(cffi:defcfun ("cairo_rel_line_to" #.(swig-lispify "cairo_rel_line_to" 'function)) :void
  (cr :pointer)
  (dx :double)
  (dy :double))

(cl:export '#.(swig-lispify "cairo_rel_line_to" 'function))

(cffi:defcfun ("cairo_rel_curve_to" #.(swig-lispify "cairo_rel_curve_to" 'function)) :void
  (cr :pointer)
  (dx1 :double)
  (dy1 :double)
  (dx2 :double)
  (dy2 :double)
  (dx3 :double)
  (dy3 :double))

(cl:export '#.(swig-lispify "cairo_rel_curve_to" 'function))

(cffi:defcfun ("cairo_rectangle" #.(swig-lispify "cairo_rectangle" 'function)) :void
  (cr :pointer)
  (x :double)
  (y :double)
  (width :double)
  (height :double))

(cl:export '#.(swig-lispify "cairo_rectangle" 'function))

(cffi:defcfun ("cairo_close_path" #.(swig-lispify "cairo_close_path" 'function)) :void
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_close_path" 'function))

(cffi:defcfun ("cairo_path_extents" #.(swig-lispify "cairo_path_extents" 'function)) :void
  (cr :pointer)
  (x1 :pointer)
  (y1 :pointer)
  (x2 :pointer)
  (y2 :pointer))

(cl:export '#.(swig-lispify "cairo_path_extents" 'function))

(cffi:defcfun ("cairo_paint" #.(swig-lispify "cairo_paint" 'function)) :void
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_paint" 'function))

(cffi:defcfun ("cairo_paint_with_alpha" #.(swig-lispify "cairo_paint_with_alpha" 'function)) :void
  (cr :pointer)
  (alpha :double))

(cl:export '#.(swig-lispify "cairo_paint_with_alpha" 'function))

(cffi:defcfun ("cairo_mask" #.(swig-lispify "cairo_mask" 'function)) :void
  (cr :pointer)
  (pattern :pointer))

(cl:export '#.(swig-lispify "cairo_mask" 'function))

(cffi:defcfun ("cairo_mask_surface" #.(swig-lispify "cairo_mask_surface" 'function)) :void
  (cr :pointer)
  (surface :pointer)
  (surface_x :double)
  (surface_y :double))

(cl:export '#.(swig-lispify "cairo_mask_surface" 'function))

(cffi:defcfun ("cairo_stroke" #.(swig-lispify "cairo_stroke" 'function)) :void
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_stroke" 'function))

(cffi:defcfun ("cairo_stroke_preserve" #.(swig-lispify "cairo_stroke_preserve" 'function)) :void
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_stroke_preserve" 'function))

(cffi:defcfun ("cairo_fill" #.(swig-lispify "cairo_fill" 'function)) :void
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_fill" 'function))

(cffi:defcfun ("cairo_fill_preserve" #.(swig-lispify "cairo_fill_preserve" 'function)) :void
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_fill_preserve" 'function))

(cffi:defcfun ("cairo_copy_page" #.(swig-lispify "cairo_copy_page" 'function)) :void
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_copy_page" 'function))

(cffi:defcfun ("cairo_show_page" #.(swig-lispify "cairo_show_page" 'function)) :void
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_show_page" 'function))

(cffi:defcfun ("cairo_in_stroke" #.(swig-lispify "cairo_in_stroke" 'function)) :int
  (cr :pointer)
  (x :double)
  (y :double))

(cl:export '#.(swig-lispify "cairo_in_stroke" 'function))

(cffi:defcfun ("cairo_in_fill" #.(swig-lispify "cairo_in_fill" 'function)) :int
  (cr :pointer)
  (x :double)
  (y :double))

(cl:export '#.(swig-lispify "cairo_in_fill" 'function))

(cffi:defcfun ("cairo_in_clip" #.(swig-lispify "cairo_in_clip" 'function)) :int
  (cr :pointer)
  (x :double)
  (y :double))

(cl:export '#.(swig-lispify "cairo_in_clip" 'function))

(cffi:defcfun ("cairo_stroke_extents" #.(swig-lispify "cairo_stroke_extents" 'function)) :void
  (cr :pointer)
  (x1 :pointer)
  (y1 :pointer)
  (x2 :pointer)
  (y2 :pointer))

(cl:export '#.(swig-lispify "cairo_stroke_extents" 'function))

(cffi:defcfun ("cairo_fill_extents" #.(swig-lispify "cairo_fill_extents" 'function)) :void
  (cr :pointer)
  (x1 :pointer)
  (y1 :pointer)
  (x2 :pointer)
  (y2 :pointer))

(cl:export '#.(swig-lispify "cairo_fill_extents" 'function))

(cffi:defcfun ("cairo_reset_clip" #.(swig-lispify "cairo_reset_clip" 'function)) :void
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_reset_clip" 'function))

(cffi:defcfun ("cairo_clip" #.(swig-lispify "cairo_clip" 'function)) :void
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_clip" 'function))

(cffi:defcfun ("cairo_clip_preserve" #.(swig-lispify "cairo_clip_preserve" 'function)) :void
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_clip_preserve" 'function))

(cffi:defcfun ("cairo_clip_extents" #.(swig-lispify "cairo_clip_extents" 'function)) :void
  (cr :pointer)
  (x1 :pointer)
  (y1 :pointer)
  (x2 :pointer)
  (y2 :pointer))

(cl:export '#.(swig-lispify "cairo_clip_extents" 'function))

(cffi:defcstruct #.(swig-lispify "cairo_rectangle_t" 'classname)
	(#.(swig-lispify "x" 'slotname) :double)
	(#.(swig-lispify "y" 'slotname) :double)
	(#.(swig-lispify "width" 'slotname) :double)
	(#.(swig-lispify "height" 'slotname) :double))

(cl:export '#.(swig-lispify "cairo_rectangle_t" 'classname))

(cl:export '#.(swig-lispify "x" 'slotname))

(cl:export '#.(swig-lispify "y" 'slotname))

(cl:export '#.(swig-lispify "width" 'slotname))

(cl:export '#.(swig-lispify "height" 'slotname))

(cffi:defcstruct #.(swig-lispify "cairo_rectangle_list_t" 'classname)
	(#.(swig-lispify "status" 'slotname) #.(swig-lispify "cairo_status_t" 'enumname))
	(#.(swig-lispify "rectangles" 'slotname) :pointer)
	(#.(swig-lispify "num_rectangles" 'slotname) :int))

(cl:export '#.(swig-lispify "cairo_rectangle_list_t" 'classname))

(cl:export '#.(swig-lispify "status" 'slotname))

(cl:export '#.(swig-lispify "rectangles" 'slotname))

(cl:export '#.(swig-lispify "num_rectangles" 'slotname))

(cffi:defcfun ("cairo_copy_clip_rectangle_list" #.(swig-lispify "cairo_copy_clip_rectangle_list" 'function)) :pointer
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_copy_clip_rectangle_list" 'function))

(cffi:defcfun ("cairo_rectangle_list_destroy" #.(swig-lispify "cairo_rectangle_list_destroy" 'function)) :void
  (rectangle_list :pointer))

(cl:export '#.(swig-lispify "cairo_rectangle_list_destroy" 'function))

(define-constant #.(swig-lispify "CAIRO_TAG_DEST" 'constant) "cairo.dest")

(cl:export '#.(swig-lispify "CAIRO_TAG_DEST" 'constant))

(define-constant #.(swig-lispify "CAIRO_TAG_LINK" 'constant) "Link")

(cl:export '#.(swig-lispify "CAIRO_TAG_LINK" 'constant))

(cffi:defcfun ("cairo_tag_begin" #.(swig-lispify "cairo_tag_begin" 'function)) :void
  (cr :pointer)
  (tag_name :string)
  (attributes :string))

(cl:export '#.(swig-lispify "cairo_tag_begin" 'function))

(cffi:defcfun ("cairo_tag_end" #.(swig-lispify "cairo_tag_end" 'function)) :void
  (cr :pointer)
  (tag_name :string))

(cl:export '#.(swig-lispify "cairo_tag_end" 'function))

(cffi:defcstruct #.(swig-lispify "cairo_glyph_t" 'classname)
	(#.(swig-lispify "index" 'slotname) :unsigned-long)
	(#.(swig-lispify "x" 'slotname) :double)
	(#.(swig-lispify "y" 'slotname) :double))

(cl:export '#.(swig-lispify "cairo_glyph_t" 'classname))

(cl:export '#.(swig-lispify "index" 'slotname))

(cl:export '#.(swig-lispify "x" 'slotname))

(cl:export '#.(swig-lispify "y" 'slotname))

(cffi:defcfun ("cairo_glyph_allocate" #.(swig-lispify "cairo_glyph_allocate" 'function)) :pointer
  (num_glyphs :int))

(cl:export '#.(swig-lispify "cairo_glyph_allocate" 'function))

(cffi:defcfun ("cairo_glyph_free" #.(swig-lispify "cairo_glyph_free" 'function)) :void
  (glyphs :pointer))

(cl:export '#.(swig-lispify "cairo_glyph_free" 'function))

(cffi:defcstruct #.(swig-lispify "cairo_text_cluster_t" 'classname)
	(#.(swig-lispify "num_bytes" 'slotname) :int)
	(#.(swig-lispify "num_glyphs" 'slotname) :int))

(cl:export '#.(swig-lispify "cairo_text_cluster_t" 'classname))

(cl:export '#.(swig-lispify "num_bytes" 'slotname))

(cl:export '#.(swig-lispify "num_glyphs" 'slotname))

(cffi:defcfun ("cairo_text_cluster_allocate" #.(swig-lispify "cairo_text_cluster_allocate" 'function)) :pointer
  (num_clusters :int))

(cl:export '#.(swig-lispify "cairo_text_cluster_allocate" 'function))

(cffi:defcfun ("cairo_text_cluster_free" #.(swig-lispify "cairo_text_cluster_free" 'function)) :void
  (clusters :pointer))

(cl:export '#.(swig-lispify "cairo_text_cluster_free" 'function))

(cffi:defcenum #.(swig-lispify "cairo_text_cluster_flags_t" 'enumname)
	(#.(swig-lispify "CAIRO_TEXT_CLUSTER_FLAG_BACKWARD" 'enumvalue :keyword) #.#x00000001))

(cl:export '#.(swig-lispify "cairo_text_cluster_flags_t" 'enumname))

(cffi:defcstruct #.(swig-lispify "cairo_text_extents_t" 'classname)
	(#.(swig-lispify "x_bearing" 'slotname) :double)
	(#.(swig-lispify "y_bearing" 'slotname) :double)
	(#.(swig-lispify "width" 'slotname) :double)
	(#.(swig-lispify "height" 'slotname) :double)
	(#.(swig-lispify "x_advance" 'slotname) :double)
	(#.(swig-lispify "y_advance" 'slotname) :double))

(cl:export '#.(swig-lispify "cairo_text_extents_t" 'classname))

(cl:export '#.(swig-lispify "x_bearing" 'slotname))

(cl:export '#.(swig-lispify "y_bearing" 'slotname))

(cl:export '#.(swig-lispify "width" 'slotname))

(cl:export '#.(swig-lispify "height" 'slotname))

(cl:export '#.(swig-lispify "x_advance" 'slotname))

(cl:export '#.(swig-lispify "y_advance" 'slotname))

(cffi:defcstruct #.(swig-lispify "cairo_font_extents_t" 'classname)
	(#.(swig-lispify "ascent" 'slotname) :double)
	(#.(swig-lispify "descent" 'slotname) :double)
	(#.(swig-lispify "height" 'slotname) :double)
	(#.(swig-lispify "max_x_advance" 'slotname) :double)
	(#.(swig-lispify "max_y_advance" 'slotname) :double))

(cl:export '#.(swig-lispify "cairo_font_extents_t" 'classname))

(cl:export '#.(swig-lispify "ascent" 'slotname))

(cl:export '#.(swig-lispify "descent" 'slotname))

(cl:export '#.(swig-lispify "height" 'slotname))

(cl:export '#.(swig-lispify "max_x_advance" 'slotname))

(cl:export '#.(swig-lispify "max_y_advance" 'slotname))

(cffi:defcenum #.(swig-lispify "cairo_font_slant_t" 'enumname)
	#.(swig-lispify "CAIRO_FONT_SLANT_NORMAL" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_FONT_SLANT_ITALIC" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_FONT_SLANT_OBLIQUE" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "cairo_font_slant_t" 'enumname))

(cffi:defcenum #.(swig-lispify "cairo_font_weight_t" 'enumname)
	#.(swig-lispify "CAIRO_FONT_WEIGHT_NORMAL" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_FONT_WEIGHT_BOLD" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "cairo_font_weight_t" 'enumname))

(cffi:defcenum #.(swig-lispify "cairo_subpixel_order_t" 'enumname)
	#.(swig-lispify "CAIRO_SUBPIXEL_ORDER_DEFAULT" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_SUBPIXEL_ORDER_RGB" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_SUBPIXEL_ORDER_BGR" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_SUBPIXEL_ORDER_VRGB" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_SUBPIXEL_ORDER_VBGR" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "cairo_subpixel_order_t" 'enumname))

(cffi:defcenum #.(swig-lispify "cairo_hint_style_t" 'enumname)
	#.(swig-lispify "CAIRO_HINT_STYLE_DEFAULT" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_HINT_STYLE_NONE" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_HINT_STYLE_SLIGHT" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_HINT_STYLE_MEDIUM" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_HINT_STYLE_FULL" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "cairo_hint_style_t" 'enumname))

(cffi:defcenum #.(swig-lispify "cairo_hint_metrics_t" 'enumname)
	#.(swig-lispify "CAIRO_HINT_METRICS_DEFAULT" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_HINT_METRICS_OFF" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_HINT_METRICS_ON" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "cairo_hint_metrics_t" 'enumname))

(cffi:defcfun ("cairo_font_options_create" #.(swig-lispify "cairo_font_options_create" 'function)) :pointer)

(cl:export '#.(swig-lispify "cairo_font_options_create" 'function))

(cffi:defcfun ("cairo_font_options_copy" #.(swig-lispify "cairo_font_options_copy" 'function)) :pointer
  (original :pointer))

(cl:export '#.(swig-lispify "cairo_font_options_copy" 'function))

(cffi:defcfun ("cairo_font_options_destroy" #.(swig-lispify "cairo_font_options_destroy" 'function)) :void
  (options :pointer))

(cl:export '#.(swig-lispify "cairo_font_options_destroy" 'function))

(cffi:defcfun ("cairo_font_options_status" #.(swig-lispify "cairo_font_options_status" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (options :pointer))

(cl:export '#.(swig-lispify "cairo_font_options_status" 'function))

(cffi:defcfun ("cairo_font_options_merge" #.(swig-lispify "cairo_font_options_merge" 'function)) :void
  (options :pointer)
  (other :pointer))

(cl:export '#.(swig-lispify "cairo_font_options_merge" 'function))

(cffi:defcfun ("cairo_font_options_equal" #.(swig-lispify "cairo_font_options_equal" 'function)) :int
  (options :pointer)
  (other :pointer))

(cl:export '#.(swig-lispify "cairo_font_options_equal" 'function))

(cffi:defcfun ("cairo_font_options_hash" #.(swig-lispify "cairo_font_options_hash" 'function)) :unsigned-long
  (options :pointer))

(cl:export '#.(swig-lispify "cairo_font_options_hash" 'function))

(cffi:defcfun ("cairo_font_options_set_antialias" #.(swig-lispify "cairo_font_options_set_antialias" 'function)) :void
  (options :pointer)
  (antialias #.(swig-lispify "cairo_antialias_t" 'enumname)))

(cl:export '#.(swig-lispify "cairo_font_options_set_antialias" 'function))

(cffi:defcfun ("cairo_font_options_get_antialias" #.(swig-lispify "cairo_font_options_get_antialias" 'function)) #.(swig-lispify "cairo_antialias_t" 'enumname)
  (options :pointer))

(cl:export '#.(swig-lispify "cairo_font_options_get_antialias" 'function))

(cffi:defcfun ("cairo_font_options_set_subpixel_order" #.(swig-lispify "cairo_font_options_set_subpixel_order" 'function)) :void
  (options :pointer)
  (subpixel_order #.(swig-lispify "cairo_subpixel_order_t" 'enumname)))

(cl:export '#.(swig-lispify "cairo_font_options_set_subpixel_order" 'function))

(cffi:defcfun ("cairo_font_options_get_subpixel_order" #.(swig-lispify "cairo_font_options_get_subpixel_order" 'function)) #.(swig-lispify "cairo_subpixel_order_t" 'enumname)
  (options :pointer))

(cl:export '#.(swig-lispify "cairo_font_options_get_subpixel_order" 'function))

(cffi:defcfun ("cairo_font_options_set_hint_style" #.(swig-lispify "cairo_font_options_set_hint_style" 'function)) :void
  (options :pointer)
  (hint_style #.(swig-lispify "cairo_hint_style_t" 'enumname)))

(cl:export '#.(swig-lispify "cairo_font_options_set_hint_style" 'function))

(cffi:defcfun ("cairo_font_options_get_hint_style" #.(swig-lispify "cairo_font_options_get_hint_style" 'function)) #.(swig-lispify "cairo_hint_style_t" 'enumname)
  (options :pointer))

(cl:export '#.(swig-lispify "cairo_font_options_get_hint_style" 'function))

(cffi:defcfun ("cairo_font_options_set_hint_metrics" #.(swig-lispify "cairo_font_options_set_hint_metrics" 'function)) :void
  (options :pointer)
  (hint_metrics #.(swig-lispify "cairo_hint_metrics_t" 'enumname)))

(cl:export '#.(swig-lispify "cairo_font_options_set_hint_metrics" 'function))

(cffi:defcfun ("cairo_font_options_get_hint_metrics" #.(swig-lispify "cairo_font_options_get_hint_metrics" 'function)) #.(swig-lispify "cairo_hint_metrics_t" 'enumname)
  (options :pointer))

(cl:export '#.(swig-lispify "cairo_font_options_get_hint_metrics" 'function))

(cffi:defcfun ("cairo_font_options_get_variations" #.(swig-lispify "cairo_font_options_get_variations" 'function)) :string
  (options :pointer))

(cl:export '#.(swig-lispify "cairo_font_options_get_variations" 'function))

(cffi:defcfun ("cairo_font_options_set_variations" #.(swig-lispify "cairo_font_options_set_variations" 'function)) :void
  (options :pointer)
  (variations :string))

(cl:export '#.(swig-lispify "cairo_font_options_set_variations" 'function))

(cffi:defcfun ("cairo_select_font_face" #.(swig-lispify "cairo_select_font_face" 'function)) :void
  (cr :pointer)
  (family :string)
  (slant #.(swig-lispify "cairo_font_slant_t" 'enumname))
  (weight #.(swig-lispify "cairo_font_weight_t" 'enumname)))

(cl:export '#.(swig-lispify "cairo_select_font_face" 'function))

(cffi:defcfun ("cairo_set_font_size" #.(swig-lispify "cairo_set_font_size" 'function)) :void
  (cr :pointer)
  (size :double))

(cl:export '#.(swig-lispify "cairo_set_font_size" 'function))

(cffi:defcfun ("cairo_set_font_matrix" #.(swig-lispify "cairo_set_font_matrix" 'function)) :void
  (cr :pointer)
  (matrix :pointer))

(cl:export '#.(swig-lispify "cairo_set_font_matrix" 'function))

(cffi:defcfun ("cairo_get_font_matrix" #.(swig-lispify "cairo_get_font_matrix" 'function)) :void
  (cr :pointer)
  (matrix :pointer))

(cl:export '#.(swig-lispify "cairo_get_font_matrix" 'function))

(cffi:defcfun ("cairo_set_font_options" #.(swig-lispify "cairo_set_font_options" 'function)) :void
  (cr :pointer)
  (options :pointer))

(cl:export '#.(swig-lispify "cairo_set_font_options" 'function))

(cffi:defcfun ("cairo_get_font_options" #.(swig-lispify "cairo_get_font_options" 'function)) :void
  (cr :pointer)
  (options :pointer))

(cl:export '#.(swig-lispify "cairo_get_font_options" 'function))

(cffi:defcfun ("cairo_set_font_face" #.(swig-lispify "cairo_set_font_face" 'function)) :void
  (cr :pointer)
  (font_face :pointer))

(cl:export '#.(swig-lispify "cairo_set_font_face" 'function))

(cffi:defcfun ("cairo_get_font_face" #.(swig-lispify "cairo_get_font_face" 'function)) :pointer
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_get_font_face" 'function))

(cffi:defcfun ("cairo_set_scaled_font" #.(swig-lispify "cairo_set_scaled_font" 'function)) :void
  (cr :pointer)
  (scaled_font :pointer))

(cl:export '#.(swig-lispify "cairo_set_scaled_font" 'function))

(cffi:defcfun ("cairo_get_scaled_font" #.(swig-lispify "cairo_get_scaled_font" 'function)) :pointer
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_get_scaled_font" 'function))

(cffi:defcfun ("cairo_show_text" #.(swig-lispify "cairo_show_text" 'function)) :void
  (cr :pointer)
  (utf8 :string))

(cl:export '#.(swig-lispify "cairo_show_text" 'function))

(cffi:defcfun ("cairo_show_glyphs" #.(swig-lispify "cairo_show_glyphs" 'function)) :void
  (cr :pointer)
  (glyphs :pointer)
  (num_glyphs :int))

(cl:export '#.(swig-lispify "cairo_show_glyphs" 'function))

(cffi:defcfun ("cairo_show_text_glyphs" #.(swig-lispify "cairo_show_text_glyphs" 'function)) :void
  (cr :pointer)
  (utf8 :string)
  (utf8_len :int)
  (glyphs :pointer)
  (num_glyphs :int)
  (clusters :pointer)
  (num_clusters :int)
  (cluster_flags #.(swig-lispify "cairo_text_cluster_flags_t" 'enumname)))

(cl:export '#.(swig-lispify "cairo_show_text_glyphs" 'function))

(cffi:defcfun ("cairo_text_path" #.(swig-lispify "cairo_text_path" 'function)) :void
  (cr :pointer)
  (utf8 :string))

(cl:export '#.(swig-lispify "cairo_text_path" 'function))

(cffi:defcfun ("cairo_glyph_path" #.(swig-lispify "cairo_glyph_path" 'function)) :void
  (cr :pointer)
  (glyphs :pointer)
  (num_glyphs :int))

(cl:export '#.(swig-lispify "cairo_glyph_path" 'function))

(cffi:defcfun ("cairo_text_extents" #.(swig-lispify "cairo_text_extents" 'function)) :void
  (cr :pointer)
  (utf8 :string)
  (extents :pointer))

(cl:export '#.(swig-lispify "cairo_text_extents" 'function))

(cffi:defcfun ("cairo_glyph_extents" #.(swig-lispify "cairo_glyph_extents" 'function)) :void
  (cr :pointer)
  (glyphs :pointer)
  (num_glyphs :int)
  (extents :pointer))

(cl:export '#.(swig-lispify "cairo_glyph_extents" 'function))

(cffi:defcfun ("cairo_font_extents" #.(swig-lispify "cairo_font_extents" 'function)) :void
  (cr :pointer)
  (extents :pointer))

(cl:export '#.(swig-lispify "cairo_font_extents" 'function))

(cffi:defcfun ("cairo_font_face_reference" #.(swig-lispify "cairo_font_face_reference" 'function)) :pointer
  (font_face :pointer))

(cl:export '#.(swig-lispify "cairo_font_face_reference" 'function))

(cffi:defcfun ("cairo_font_face_destroy" #.(swig-lispify "cairo_font_face_destroy" 'function)) :void
  (font_face :pointer))

(cl:export '#.(swig-lispify "cairo_font_face_destroy" 'function))

(cffi:defcfun ("cairo_font_face_get_reference_count" #.(swig-lispify "cairo_font_face_get_reference_count" 'function)) :unsigned-int
  (font_face :pointer))

(cl:export '#.(swig-lispify "cairo_font_face_get_reference_count" 'function))

(cffi:defcfun ("cairo_font_face_status" #.(swig-lispify "cairo_font_face_status" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (font_face :pointer))

(cl:export '#.(swig-lispify "cairo_font_face_status" 'function))

(cffi:defcenum #.(swig-lispify "cairo_font_type_t" 'enumname)
	#.(swig-lispify "CAIRO_FONT_TYPE_TOY" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_FONT_TYPE_FT" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_FONT_TYPE_WIN32" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_FONT_TYPE_QUARTZ" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_FONT_TYPE_USER" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "cairo_font_type_t" 'enumname))

(cffi:defcfun ("cairo_font_face_get_type" #.(swig-lispify "cairo_font_face_get_type" 'function)) #.(swig-lispify "cairo_font_type_t" 'enumname)
  (font_face :pointer))

(cl:export '#.(swig-lispify "cairo_font_face_get_type" 'function))

(cffi:defcfun ("cairo_font_face_get_user_data" #.(swig-lispify "cairo_font_face_get_user_data" 'function)) :pointer
  (font_face :pointer)
  (key :pointer))

(cl:export '#.(swig-lispify "cairo_font_face_get_user_data" 'function))

(cffi:defcfun ("cairo_font_face_set_user_data" #.(swig-lispify "cairo_font_face_set_user_data" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (font_face :pointer)
  (key :pointer)
  (user_data :pointer)
  (destroy :pointer))

(cl:export '#.(swig-lispify "cairo_font_face_set_user_data" 'function))

(cffi:defcfun ("cairo_scaled_font_create" #.(swig-lispify "cairo_scaled_font_create" 'function)) :pointer
  (font_face :pointer)
  (font_matrix :pointer)
  (ctm :pointer)
  (options :pointer))

(cl:export '#.(swig-lispify "cairo_scaled_font_create" 'function))

(cffi:defcfun ("cairo_scaled_font_reference" #.(swig-lispify "cairo_scaled_font_reference" 'function)) :pointer
  (scaled_font :pointer))

(cl:export '#.(swig-lispify "cairo_scaled_font_reference" 'function))

(cffi:defcfun ("cairo_scaled_font_destroy" #.(swig-lispify "cairo_scaled_font_destroy" 'function)) :void
  (scaled_font :pointer))

(cl:export '#.(swig-lispify "cairo_scaled_font_destroy" 'function))

(cffi:defcfun ("cairo_scaled_font_get_reference_count" #.(swig-lispify "cairo_scaled_font_get_reference_count" 'function)) :unsigned-int
  (scaled_font :pointer))

(cl:export '#.(swig-lispify "cairo_scaled_font_get_reference_count" 'function))

(cffi:defcfun ("cairo_scaled_font_status" #.(swig-lispify "cairo_scaled_font_status" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (scaled_font :pointer))

(cl:export '#.(swig-lispify "cairo_scaled_font_status" 'function))

(cffi:defcfun ("cairo_scaled_font_get_type" #.(swig-lispify "cairo_scaled_font_get_type" 'function)) #.(swig-lispify "cairo_font_type_t" 'enumname)
  (scaled_font :pointer))

(cl:export '#.(swig-lispify "cairo_scaled_font_get_type" 'function))

(cffi:defcfun ("cairo_scaled_font_get_user_data" #.(swig-lispify "cairo_scaled_font_get_user_data" 'function)) :pointer
  (scaled_font :pointer)
  (key :pointer))

(cl:export '#.(swig-lispify "cairo_scaled_font_get_user_data" 'function))

(cffi:defcfun ("cairo_scaled_font_set_user_data" #.(swig-lispify "cairo_scaled_font_set_user_data" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (scaled_font :pointer)
  (key :pointer)
  (user_data :pointer)
  (destroy :pointer))

(cl:export '#.(swig-lispify "cairo_scaled_font_set_user_data" 'function))

(cffi:defcfun ("cairo_scaled_font_extents" #.(swig-lispify "cairo_scaled_font_extents" 'function)) :void
  (scaled_font :pointer)
  (extents :pointer))

(cl:export '#.(swig-lispify "cairo_scaled_font_extents" 'function))

(cffi:defcfun ("cairo_scaled_font_text_extents" #.(swig-lispify "cairo_scaled_font_text_extents" 'function)) :void
  (scaled_font :pointer)
  (utf8 :string)
  (extents :pointer))

(cl:export '#.(swig-lispify "cairo_scaled_font_text_extents" 'function))

(cffi:defcfun ("cairo_scaled_font_glyph_extents" #.(swig-lispify "cairo_scaled_font_glyph_extents" 'function)) :void
  (scaled_font :pointer)
  (glyphs :pointer)
  (num_glyphs :int)
  (extents :pointer))

(cl:export '#.(swig-lispify "cairo_scaled_font_glyph_extents" 'function))

(cffi:defcfun ("cairo_scaled_font_text_to_glyphs" #.(swig-lispify "cairo_scaled_font_text_to_glyphs" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (scaled_font :pointer)
  (x :double)
  (y :double)
  (utf8 :string)
  (utf8_len :int)
  (glyphs :pointer)
  (num_glyphs :pointer)
  (clusters :pointer)
  (num_clusters :pointer)
  (cluster_flags :pointer))

(cl:export '#.(swig-lispify "cairo_scaled_font_text_to_glyphs" 'function))

(cffi:defcfun ("cairo_scaled_font_get_font_face" #.(swig-lispify "cairo_scaled_font_get_font_face" 'function)) :pointer
  (scaled_font :pointer))

(cl:export '#.(swig-lispify "cairo_scaled_font_get_font_face" 'function))

(cffi:defcfun ("cairo_scaled_font_get_font_matrix" #.(swig-lispify "cairo_scaled_font_get_font_matrix" 'function)) :void
  (scaled_font :pointer)
  (font_matrix :pointer))

(cl:export '#.(swig-lispify "cairo_scaled_font_get_font_matrix" 'function))

(cffi:defcfun ("cairo_scaled_font_get_ctm" #.(swig-lispify "cairo_scaled_font_get_ctm" 'function)) :void
  (scaled_font :pointer)
  (ctm :pointer))

(cl:export '#.(swig-lispify "cairo_scaled_font_get_ctm" 'function))

(cffi:defcfun ("cairo_scaled_font_get_scale_matrix" #.(swig-lispify "cairo_scaled_font_get_scale_matrix" 'function)) :void
  (scaled_font :pointer)
  (scale_matrix :pointer))

(cl:export '#.(swig-lispify "cairo_scaled_font_get_scale_matrix" 'function))

(cffi:defcfun ("cairo_scaled_font_get_font_options" #.(swig-lispify "cairo_scaled_font_get_font_options" 'function)) :void
  (scaled_font :pointer)
  (options :pointer))

(cl:export '#.(swig-lispify "cairo_scaled_font_get_font_options" 'function))

(cffi:defcfun ("cairo_toy_font_face_create" #.(swig-lispify "cairo_toy_font_face_create" 'function)) :pointer
  (family :string)
  (slant #.(swig-lispify "cairo_font_slant_t" 'enumname))
  (weight #.(swig-lispify "cairo_font_weight_t" 'enumname)))

(cl:export '#.(swig-lispify "cairo_toy_font_face_create" 'function))

(cffi:defcfun ("cairo_toy_font_face_get_family" #.(swig-lispify "cairo_toy_font_face_get_family" 'function)) :string
  (font_face :pointer))

(cl:export '#.(swig-lispify "cairo_toy_font_face_get_family" 'function))

(cffi:defcfun ("cairo_toy_font_face_get_slant" #.(swig-lispify "cairo_toy_font_face_get_slant" 'function)) #.(swig-lispify "cairo_font_slant_t" 'enumname)
  (font_face :pointer))

(cl:export '#.(swig-lispify "cairo_toy_font_face_get_slant" 'function))

(cffi:defcfun ("cairo_toy_font_face_get_weight" #.(swig-lispify "cairo_toy_font_face_get_weight" 'function)) #.(swig-lispify "cairo_font_weight_t" 'enumname)
  (font_face :pointer))

(cl:export '#.(swig-lispify "cairo_toy_font_face_get_weight" 'function))

(cffi:defcfun ("cairo_user_font_face_create" #.(swig-lispify "cairo_user_font_face_create" 'function)) :pointer)

(cl:export '#.(swig-lispify "cairo_user_font_face_create" 'function))

(cffi:defcfun ("cairo_user_font_face_set_init_func" #.(swig-lispify "cairo_user_font_face_set_init_func" 'function)) :void
  (font_face :pointer)
  (init_func :pointer))

(cl:export '#.(swig-lispify "cairo_user_font_face_set_init_func" 'function))

(cffi:defcfun ("cairo_user_font_face_set_render_glyph_func" #.(swig-lispify "cairo_user_font_face_set_render_glyph_func" 'function)) :void
  (font_face :pointer)
  (render_glyph_func :pointer))

(cl:export '#.(swig-lispify "cairo_user_font_face_set_render_glyph_func" 'function))

(cffi:defcfun ("cairo_user_font_face_set_text_to_glyphs_func" #.(swig-lispify "cairo_user_font_face_set_text_to_glyphs_func" 'function)) :void
  (font_face :pointer)
  (text_to_glyphs_func :pointer))

(cl:export '#.(swig-lispify "cairo_user_font_face_set_text_to_glyphs_func" 'function))

(cffi:defcfun ("cairo_user_font_face_set_unicode_to_glyph_func" #.(swig-lispify "cairo_user_font_face_set_unicode_to_glyph_func" 'function)) :void
  (font_face :pointer)
  (unicode_to_glyph_func :pointer))

(cl:export '#.(swig-lispify "cairo_user_font_face_set_unicode_to_glyph_func" 'function))

(cffi:defcfun ("cairo_user_font_face_get_init_func" #.(swig-lispify "cairo_user_font_face_get_init_func" 'function)) :pointer
  (font_face :pointer))

(cl:export '#.(swig-lispify "cairo_user_font_face_get_init_func" 'function))

(cffi:defcfun ("cairo_user_font_face_get_render_glyph_func" #.(swig-lispify "cairo_user_font_face_get_render_glyph_func" 'function)) :pointer
  (font_face :pointer))

(cl:export '#.(swig-lispify "cairo_user_font_face_get_render_glyph_func" 'function))

(cffi:defcfun ("cairo_user_font_face_get_text_to_glyphs_func" #.(swig-lispify "cairo_user_font_face_get_text_to_glyphs_func" 'function)) :pointer
  (font_face :pointer))

(cl:export '#.(swig-lispify "cairo_user_font_face_get_text_to_glyphs_func" 'function))

(cffi:defcfun ("cairo_user_font_face_get_unicode_to_glyph_func" #.(swig-lispify "cairo_user_font_face_get_unicode_to_glyph_func" 'function)) :pointer
  (font_face :pointer))

(cl:export '#.(swig-lispify "cairo_user_font_face_get_unicode_to_glyph_func" 'function))

(cffi:defcfun ("cairo_get_operator" #.(swig-lispify "cairo_get_operator" 'function)) #.(swig-lispify "cairo_operator_t" 'enumname)
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_get_operator" 'function))

(cffi:defcfun ("cairo_get_source" #.(swig-lispify "cairo_get_source" 'function)) :pointer
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_get_source" 'function))

(cffi:defcfun ("cairo_get_tolerance" #.(swig-lispify "cairo_get_tolerance" 'function)) :double
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_get_tolerance" 'function))

(cffi:defcfun ("cairo_get_antialias" #.(swig-lispify "cairo_get_antialias" 'function)) #.(swig-lispify "cairo_antialias_t" 'enumname)
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_get_antialias" 'function))

(cffi:defcfun ("cairo_has_current_point" #.(swig-lispify "cairo_has_current_point" 'function)) :int
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_has_current_point" 'function))

(cffi:defcfun ("cairo_get_current_point" #.(swig-lispify "cairo_get_current_point" 'function)) :void
  (cr :pointer)
  (x :pointer)
  (y :pointer))

(cl:export '#.(swig-lispify "cairo_get_current_point" 'function))

(cffi:defcfun ("cairo_get_fill_rule" #.(swig-lispify "cairo_get_fill_rule" 'function)) #.(swig-lispify "cairo_fill_rule_t" 'enumname)
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_get_fill_rule" 'function))

(cffi:defcfun ("cairo_get_line_width" #.(swig-lispify "cairo_get_line_width" 'function)) :double
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_get_line_width" 'function))

(cffi:defcfun ("cairo_get_line_cap" #.(swig-lispify "cairo_get_line_cap" 'function)) #.(swig-lispify "cairo_line_cap_t" 'enumname)
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_get_line_cap" 'function))

(cffi:defcfun ("cairo_get_line_join" #.(swig-lispify "cairo_get_line_join" 'function)) #.(swig-lispify "cairo_line_join_t" 'enumname)
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_get_line_join" 'function))

(cffi:defcfun ("cairo_get_miter_limit" #.(swig-lispify "cairo_get_miter_limit" 'function)) :double
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_get_miter_limit" 'function))

(cffi:defcfun ("cairo_get_dash_count" #.(swig-lispify "cairo_get_dash_count" 'function)) :int
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_get_dash_count" 'function))

(cffi:defcfun ("cairo_get_dash" #.(swig-lispify "cairo_get_dash" 'function)) :void
  (cr :pointer)
  (dashes :pointer)
  (offset :pointer))

(cl:export '#.(swig-lispify "cairo_get_dash" 'function))

(cffi:defcfun ("cairo_get_matrix" #.(swig-lispify "cairo_get_matrix" 'function)) :void
  (cr :pointer)
  (matrix :pointer))

(cl:export '#.(swig-lispify "cairo_get_matrix" 'function))

(cffi:defcfun ("cairo_get_target" #.(swig-lispify "cairo_get_target" 'function)) :pointer
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_get_target" 'function))

(cffi:defcfun ("cairo_get_group_target" #.(swig-lispify "cairo_get_group_target" 'function)) :pointer
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_get_group_target" 'function))

(cffi:defcenum #.(swig-lispify "cairo_path_data_type_t" 'enumname)
	#.(swig-lispify "CAIRO_PATH_MOVE_TO" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_PATH_LINE_TO" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_PATH_CURVE_TO" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_PATH_CLOSE_PATH" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "cairo_path_data_type_t" 'enumname))

(cffi:defcunion #.(swig-lispify "_cairo_path_data_t" 'classname)
	(#.(swig-lispify "header" 'slotname) :pointer)
	(#.(swig-lispify "point" 'slotname) :pointer))

(cl:export '#.(swig-lispify "_cairo_path_data_t" 'classname))

(cl:export '#.(swig-lispify "header" 'slotname))

(cl:export '#.(swig-lispify "point" 'slotname))

(cffi:defcstruct #.(swig-lispify "_cairo_path_data_t_point" 'classname)
	(#.(swig-lispify "x" 'slotname) :double)
	(#.(swig-lispify "y" 'slotname) :double))

(cl:export '#.(swig-lispify "_cairo_path_data_t_point" 'classname))

(cl:export '#.(swig-lispify "x" 'slotname))

(cl:export '#.(swig-lispify "y" 'slotname))

(cffi:defcstruct #.(swig-lispify "_cairo_path_data_t_header" 'classname)
	(#.(swig-lispify "type" 'slotname) #.(swig-lispify "cairo_path_data_type_t" 'enumname))
	(#.(swig-lispify "length" 'slotname) :int))

(cl:export '#.(swig-lispify "_cairo_path_data_t_header" 'classname))

(cl:export '#.(swig-lispify "type" 'slotname))

(cl:export '#.(swig-lispify "length" 'slotname))

(cffi:defcstruct #.(swig-lispify "cairo_path_t" 'classname)
	(#.(swig-lispify "status" 'slotname) #.(swig-lispify "cairo_status_t" 'enumname))
	(#.(swig-lispify "data" 'slotname) :pointer)
	(#.(swig-lispify "num_data" 'slotname) :int))

(cl:export '#.(swig-lispify "cairo_path_t" 'classname))

(cl:export '#.(swig-lispify "status" 'slotname))

(cl:export '#.(swig-lispify "data" 'slotname))

(cl:export '#.(swig-lispify "num_data" 'slotname))

(cffi:defcfun ("cairo_copy_path" #.(swig-lispify "cairo_copy_path" 'function)) :pointer
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_copy_path" 'function))

(cffi:defcfun ("cairo_copy_path_flat" #.(swig-lispify "cairo_copy_path_flat" 'function)) :pointer
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_copy_path_flat" 'function))

(cffi:defcfun ("cairo_append_path" #.(swig-lispify "cairo_append_path" 'function)) :void
  (cr :pointer)
  (path :pointer))

(cl:export '#.(swig-lispify "cairo_append_path" 'function))

(cffi:defcfun ("cairo_path_destroy" #.(swig-lispify "cairo_path_destroy" 'function)) :void
  (path :pointer))

(cl:export '#.(swig-lispify "cairo_path_destroy" 'function))

(cffi:defcfun ("cairo_status" #.(swig-lispify "cairo_status" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (cr :pointer))

(cl:export '#.(swig-lispify "cairo_status" 'function))

(cffi:defcfun ("cairo_status_to_string" #.(swig-lispify "cairo_status_to_string" 'function)) :string
  (status #.(swig-lispify "cairo_status_t" 'enumname)))

(cl:export '#.(swig-lispify "cairo_status_to_string" 'function))

(cffi:defcfun ("cairo_device_reference" #.(swig-lispify "cairo_device_reference" 'function)) :pointer
  (device :pointer))

(cl:export '#.(swig-lispify "cairo_device_reference" 'function))

(cffi:defcenum #.(swig-lispify "cairo_device_type_t" 'enumname)
	#.(swig-lispify "CAIRO_DEVICE_TYPE_DRM" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_DEVICE_TYPE_GL" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_DEVICE_TYPE_SCRIPT" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_DEVICE_TYPE_XCB" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_DEVICE_TYPE_XLIB" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_DEVICE_TYPE_XML" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_DEVICE_TYPE_COGL" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_DEVICE_TYPE_WIN32" 'enumvalue :keyword)
	(#.(swig-lispify "CAIRO_DEVICE_TYPE_INVALID" 'enumvalue :keyword) #.-1))

(cl:export '#.(swig-lispify "cairo_device_type_t" 'enumname))

(cffi:defcfun ("cairo_device_get_type" #.(swig-lispify "cairo_device_get_type" 'function)) #.(swig-lispify "cairo_device_type_t" 'enumname)
  (device :pointer))

(cl:export '#.(swig-lispify "cairo_device_get_type" 'function))

(cffi:defcfun ("cairo_device_status" #.(swig-lispify "cairo_device_status" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (device :pointer))

(cl:export '#.(swig-lispify "cairo_device_status" 'function))

(cffi:defcfun ("cairo_device_acquire" #.(swig-lispify "cairo_device_acquire" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (device :pointer))

(cl:export '#.(swig-lispify "cairo_device_acquire" 'function))

(cffi:defcfun ("cairo_device_release" #.(swig-lispify "cairo_device_release" 'function)) :void
  (device :pointer))

(cl:export '#.(swig-lispify "cairo_device_release" 'function))

(cffi:defcfun ("cairo_device_flush" #.(swig-lispify "cairo_device_flush" 'function)) :void
  (device :pointer))

(cl:export '#.(swig-lispify "cairo_device_flush" 'function))

(cffi:defcfun ("cairo_device_finish" #.(swig-lispify "cairo_device_finish" 'function)) :void
  (device :pointer))

(cl:export '#.(swig-lispify "cairo_device_finish" 'function))

(cffi:defcfun ("cairo_device_destroy" #.(swig-lispify "cairo_device_destroy" 'function)) :void
  (device :pointer))

(cl:export '#.(swig-lispify "cairo_device_destroy" 'function))

(cffi:defcfun ("cairo_device_get_reference_count" #.(swig-lispify "cairo_device_get_reference_count" 'function)) :unsigned-int
  (device :pointer))

(cl:export '#.(swig-lispify "cairo_device_get_reference_count" 'function))

(cffi:defcfun ("cairo_device_get_user_data" #.(swig-lispify "cairo_device_get_user_data" 'function)) :pointer
  (device :pointer)
  (key :pointer))

(cl:export '#.(swig-lispify "cairo_device_get_user_data" 'function))

(cffi:defcfun ("cairo_device_set_user_data" #.(swig-lispify "cairo_device_set_user_data" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (device :pointer)
  (key :pointer)
  (user_data :pointer)
  (destroy :pointer))

(cl:export '#.(swig-lispify "cairo_device_set_user_data" 'function))

(cffi:defcfun ("cairo_surface_create_similar" #.(swig-lispify "cairo_surface_create_similar" 'function)) :pointer
  (other :pointer)
  (content #.(swig-lispify "cairo_content_t" 'enumname))
  (width :int)
  (height :int))

(cl:export '#.(swig-lispify "cairo_surface_create_similar" 'function))

(cffi:defcfun ("cairo_surface_create_similar_image" #.(swig-lispify "cairo_surface_create_similar_image" 'function)) :pointer
  (other :pointer)
  (format #.(swig-lispify "cairo_format_t" 'enumname))
  (width :int)
  (height :int))

(cl:export '#.(swig-lispify "cairo_surface_create_similar_image" 'function))

(cffi:defcfun ("cairo_surface_map_to_image" #.(swig-lispify "cairo_surface_map_to_image" 'function)) :pointer
  (surface :pointer)
  (extents :pointer))

(cl:export '#.(swig-lispify "cairo_surface_map_to_image" 'function))

(cffi:defcfun ("cairo_surface_unmap_image" #.(swig-lispify "cairo_surface_unmap_image" 'function)) :void
  (surface :pointer)
  (image :pointer))

(cl:export '#.(swig-lispify "cairo_surface_unmap_image" 'function))

(cffi:defcfun ("cairo_surface_create_for_rectangle" #.(swig-lispify "cairo_surface_create_for_rectangle" 'function)) :pointer
  (target :pointer)
  (x :double)
  (y :double)
  (width :double)
  (height :double))

(cl:export '#.(swig-lispify "cairo_surface_create_for_rectangle" 'function))

(cffi:defcenum #.(swig-lispify "cairo_surface_observer_mode_t" 'enumname)
	(#.(swig-lispify "CAIRO_SURFACE_OBSERVER_NORMAL" 'enumvalue :keyword) #.0)
	(#.(swig-lispify "CAIRO_SURFACE_OBSERVER_RECORD_OPERATIONS" 'enumvalue :keyword) #.#x1))

(cl:export '#.(swig-lispify "cairo_surface_observer_mode_t" 'enumname))

(cffi:defcfun ("cairo_surface_create_observer" #.(swig-lispify "cairo_surface_create_observer" 'function)) :pointer
  (target :pointer)
  (mode #.(swig-lispify "cairo_surface_observer_mode_t" 'enumname)))

(cl:export '#.(swig-lispify "cairo_surface_create_observer" 'function))

(cffi:defcfun ("cairo_surface_observer_add_paint_callback" #.(swig-lispify "cairo_surface_observer_add_paint_callback" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (abstract_surface :pointer)
  (func :pointer)
  (data :pointer))

(cl:export '#.(swig-lispify "cairo_surface_observer_add_paint_callback" 'function))

(cffi:defcfun ("cairo_surface_observer_add_mask_callback" #.(swig-lispify "cairo_surface_observer_add_mask_callback" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (abstract_surface :pointer)
  (func :pointer)
  (data :pointer))

(cl:export '#.(swig-lispify "cairo_surface_observer_add_mask_callback" 'function))

(cffi:defcfun ("cairo_surface_observer_add_fill_callback" #.(swig-lispify "cairo_surface_observer_add_fill_callback" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (abstract_surface :pointer)
  (func :pointer)
  (data :pointer))

(cl:export '#.(swig-lispify "cairo_surface_observer_add_fill_callback" 'function))

(cffi:defcfun ("cairo_surface_observer_add_stroke_callback" #.(swig-lispify "cairo_surface_observer_add_stroke_callback" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (abstract_surface :pointer)
  (func :pointer)
  (data :pointer))

(cl:export '#.(swig-lispify "cairo_surface_observer_add_stroke_callback" 'function))

(cffi:defcfun ("cairo_surface_observer_add_glyphs_callback" #.(swig-lispify "cairo_surface_observer_add_glyphs_callback" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (abstract_surface :pointer)
  (func :pointer)
  (data :pointer))

(cl:export '#.(swig-lispify "cairo_surface_observer_add_glyphs_callback" 'function))

(cffi:defcfun ("cairo_surface_observer_add_flush_callback" #.(swig-lispify "cairo_surface_observer_add_flush_callback" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (abstract_surface :pointer)
  (func :pointer)
  (data :pointer))

(cl:export '#.(swig-lispify "cairo_surface_observer_add_flush_callback" 'function))

(cffi:defcfun ("cairo_surface_observer_add_finish_callback" #.(swig-lispify "cairo_surface_observer_add_finish_callback" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (abstract_surface :pointer)
  (func :pointer)
  (data :pointer))

(cl:export '#.(swig-lispify "cairo_surface_observer_add_finish_callback" 'function))

(cffi:defcfun ("cairo_surface_observer_print" #.(swig-lispify "cairo_surface_observer_print" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (surface :pointer)
  (write_func :pointer)
  (closure :pointer))

(cl:export '#.(swig-lispify "cairo_surface_observer_print" 'function))

(cffi:defcfun ("cairo_surface_observer_elapsed" #.(swig-lispify "cairo_surface_observer_elapsed" 'function)) :double
  (surface :pointer))

(cl:export '#.(swig-lispify "cairo_surface_observer_elapsed" 'function))

(cffi:defcfun ("cairo_device_observer_print" #.(swig-lispify "cairo_device_observer_print" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (device :pointer)
  (write_func :pointer)
  (closure :pointer))

(cl:export '#.(swig-lispify "cairo_device_observer_print" 'function))

(cffi:defcfun ("cairo_device_observer_elapsed" #.(swig-lispify "cairo_device_observer_elapsed" 'function)) :double
  (device :pointer))

(cl:export '#.(swig-lispify "cairo_device_observer_elapsed" 'function))

(cffi:defcfun ("cairo_device_observer_paint_elapsed" #.(swig-lispify "cairo_device_observer_paint_elapsed" 'function)) :double
  (device :pointer))

(cl:export '#.(swig-lispify "cairo_device_observer_paint_elapsed" 'function))

(cffi:defcfun ("cairo_device_observer_mask_elapsed" #.(swig-lispify "cairo_device_observer_mask_elapsed" 'function)) :double
  (device :pointer))

(cl:export '#.(swig-lispify "cairo_device_observer_mask_elapsed" 'function))

(cffi:defcfun ("cairo_device_observer_fill_elapsed" #.(swig-lispify "cairo_device_observer_fill_elapsed" 'function)) :double
  (device :pointer))

(cl:export '#.(swig-lispify "cairo_device_observer_fill_elapsed" 'function))

(cffi:defcfun ("cairo_device_observer_stroke_elapsed" #.(swig-lispify "cairo_device_observer_stroke_elapsed" 'function)) :double
  (device :pointer))

(cl:export '#.(swig-lispify "cairo_device_observer_stroke_elapsed" 'function))

(cffi:defcfun ("cairo_device_observer_glyphs_elapsed" #.(swig-lispify "cairo_device_observer_glyphs_elapsed" 'function)) :double
  (device :pointer))

(cl:export '#.(swig-lispify "cairo_device_observer_glyphs_elapsed" 'function))

(cffi:defcfun ("cairo_surface_reference" #.(swig-lispify "cairo_surface_reference" 'function)) :pointer
  (surface :pointer))

(cl:export '#.(swig-lispify "cairo_surface_reference" 'function))

(cffi:defcfun ("cairo_surface_finish" #.(swig-lispify "cairo_surface_finish" 'function)) :void
  (surface :pointer))

(cl:export '#.(swig-lispify "cairo_surface_finish" 'function))

(cffi:defcfun ("cairo_surface_destroy" #.(swig-lispify "cairo_surface_destroy" 'function)) :void
  (surface :pointer))

(cl:export '#.(swig-lispify "cairo_surface_destroy" 'function))

(cffi:defcfun ("cairo_surface_get_device" #.(swig-lispify "cairo_surface_get_device" 'function)) :pointer
  (surface :pointer))

(cl:export '#.(swig-lispify "cairo_surface_get_device" 'function))

(cffi:defcfun ("cairo_surface_get_reference_count" #.(swig-lispify "cairo_surface_get_reference_count" 'function)) :unsigned-int
  (surface :pointer))

(cl:export '#.(swig-lispify "cairo_surface_get_reference_count" 'function))

(cffi:defcfun ("cairo_surface_status" #.(swig-lispify "cairo_surface_status" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (surface :pointer))

(cl:export '#.(swig-lispify "cairo_surface_status" 'function))

(cffi:defcenum #.(swig-lispify "cairo_surface_type_t" 'enumname)
	#.(swig-lispify "CAIRO_SURFACE_TYPE_IMAGE" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_SURFACE_TYPE_PDF" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_SURFACE_TYPE_PS" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_SURFACE_TYPE_XLIB" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_SURFACE_TYPE_XCB" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_SURFACE_TYPE_GLITZ" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_SURFACE_TYPE_QUARTZ" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_SURFACE_TYPE_WIN32" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_SURFACE_TYPE_BEOS" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_SURFACE_TYPE_DIRECTFB" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_SURFACE_TYPE_SVG" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_SURFACE_TYPE_OS2" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_SURFACE_TYPE_WIN32_PRINTING" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_SURFACE_TYPE_QUARTZ_IMAGE" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_SURFACE_TYPE_SCRIPT" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_SURFACE_TYPE_QT" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_SURFACE_TYPE_RECORDING" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_SURFACE_TYPE_VG" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_SURFACE_TYPE_GL" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_SURFACE_TYPE_DRM" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_SURFACE_TYPE_TEE" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_SURFACE_TYPE_XML" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_SURFACE_TYPE_SKIA" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_SURFACE_TYPE_SUBSURFACE" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_SURFACE_TYPE_COGL" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "cairo_surface_type_t" 'enumname))

(cffi:defcfun ("cairo_surface_get_type" #.(swig-lispify "cairo_surface_get_type" 'function)) #.(swig-lispify "cairo_surface_type_t" 'enumname)
  (surface :pointer))

(cl:export '#.(swig-lispify "cairo_surface_get_type" 'function))

(cffi:defcfun ("cairo_surface_get_content" #.(swig-lispify "cairo_surface_get_content" 'function)) #.(swig-lispify "cairo_content_t" 'enumname)
  (surface :pointer))

(cl:export '#.(swig-lispify "cairo_surface_get_content" 'function))

(cffi:defcfun ("cairo_surface_write_to_png" #.(swig-lispify "cairo_surface_write_to_png" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (surface :pointer)
  (filename :string))

(cl:export '#.(swig-lispify "cairo_surface_write_to_png" 'function))

(cffi:defcfun ("cairo_surface_write_to_png_stream" #.(swig-lispify "cairo_surface_write_to_png_stream" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (surface :pointer)
  (write_func :pointer)
  (closure :pointer))

(cl:export '#.(swig-lispify "cairo_surface_write_to_png_stream" 'function))

(cffi:defcfun ("cairo_surface_get_user_data" #.(swig-lispify "cairo_surface_get_user_data" 'function)) :pointer
  (surface :pointer)
  (key :pointer))

(cl:export '#.(swig-lispify "cairo_surface_get_user_data" 'function))

(cffi:defcfun ("cairo_surface_set_user_data" #.(swig-lispify "cairo_surface_set_user_data" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (surface :pointer)
  (key :pointer)
  (user_data :pointer)
  (destroy :pointer))

(cl:export '#.(swig-lispify "cairo_surface_set_user_data" 'function))

(define-constant #.(swig-lispify "CAIRO_MIME_TYPE_JPEG" 'constant) "image/jpeg")

(cl:export '#.(swig-lispify "CAIRO_MIME_TYPE_JPEG" 'constant))

(define-constant #.(swig-lispify "CAIRO_MIME_TYPE_PNG" 'constant) "image/png")

(cl:export '#.(swig-lispify "CAIRO_MIME_TYPE_PNG" 'constant))

(define-constant #.(swig-lispify "CAIRO_MIME_TYPE_JP2" 'constant) "image/jp2")

(cl:export '#.(swig-lispify "CAIRO_MIME_TYPE_JP2" 'constant))

(define-constant #.(swig-lispify "CAIRO_MIME_TYPE_URI" 'constant) "text/x-uri")

(cl:export '#.(swig-lispify "CAIRO_MIME_TYPE_URI" 'constant))

(define-constant #.(swig-lispify "CAIRO_MIME_TYPE_UNIQUE_ID" 'constant) "application/x-cairo.uuid")

(cl:export '#.(swig-lispify "CAIRO_MIME_TYPE_UNIQUE_ID" 'constant))

(define-constant #.(swig-lispify "CAIRO_MIME_TYPE_JBIG2" 'constant) "application/x-cairo.jbig2")

(cl:export '#.(swig-lispify "CAIRO_MIME_TYPE_JBIG2" 'constant))

(define-constant #.(swig-lispify "CAIRO_MIME_TYPE_JBIG2_GLOBAL" 'constant) "application/x-cairo.jbig2-global")

(cl:export '#.(swig-lispify "CAIRO_MIME_TYPE_JBIG2_GLOBAL" 'constant))

(define-constant #.(swig-lispify "CAIRO_MIME_TYPE_JBIG2_GLOBAL_ID" 'constant) "application/x-cairo.jbig2-global-id")

(cl:export '#.(swig-lispify "CAIRO_MIME_TYPE_JBIG2_GLOBAL_ID" 'constant))

(define-constant #.(swig-lispify "CAIRO_MIME_TYPE_CCITT_FAX" 'constant) "image/g3fax")

(cl:export '#.(swig-lispify "CAIRO_MIME_TYPE_CCITT_FAX" 'constant))

(define-constant #.(swig-lispify "CAIRO_MIME_TYPE_CCITT_FAX_PARAMS" 'constant) "application/x-cairo.ccitt.params")

(cl:export '#.(swig-lispify "CAIRO_MIME_TYPE_CCITT_FAX_PARAMS" 'constant))

(define-constant #.(swig-lispify "CAIRO_MIME_TYPE_EPS" 'constant) "application/postscript")

(cl:export '#.(swig-lispify "CAIRO_MIME_TYPE_EPS" 'constant))

(define-constant #.(swig-lispify "CAIRO_MIME_TYPE_EPS_PARAMS" 'constant) "application/x-cairo.eps.params")

(cl:export '#.(swig-lispify "CAIRO_MIME_TYPE_EPS_PARAMS" 'constant))

(cffi:defcfun ("cairo_surface_get_mime_data" #.(swig-lispify "cairo_surface_get_mime_data" 'function)) :void
  (surface :pointer)
  (mime_type :string)
  (data :pointer)
  (length :pointer))

(cl:export '#.(swig-lispify "cairo_surface_get_mime_data" 'function))

(cffi:defcfun ("cairo_surface_set_mime_data" #.(swig-lispify "cairo_surface_set_mime_data" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (surface :pointer)
  (mime_type :string)
  (data :pointer)
  (length :unsigned-long)
  (destroy :pointer)
  (closure :pointer))

(cl:export '#.(swig-lispify "cairo_surface_set_mime_data" 'function))

(cffi:defcfun ("cairo_surface_supports_mime_type" #.(swig-lispify "cairo_surface_supports_mime_type" 'function)) :int
  (surface :pointer)
  (mime_type :string))

(cl:export '#.(swig-lispify "cairo_surface_supports_mime_type" 'function))

(cffi:defcfun ("cairo_surface_get_font_options" #.(swig-lispify "cairo_surface_get_font_options" 'function)) :void
  (surface :pointer)
  (options :pointer))

(cl:export '#.(swig-lispify "cairo_surface_get_font_options" 'function))

(cffi:defcfun ("cairo_surface_flush" #.(swig-lispify "cairo_surface_flush" 'function)) :void
  (surface :pointer))

(cl:export '#.(swig-lispify "cairo_surface_flush" 'function))

(cffi:defcfun ("cairo_surface_mark_dirty" #.(swig-lispify "cairo_surface_mark_dirty" 'function)) :void
  (surface :pointer))

(cl:export '#.(swig-lispify "cairo_surface_mark_dirty" 'function))

(cffi:defcfun ("cairo_surface_mark_dirty_rectangle" #.(swig-lispify "cairo_surface_mark_dirty_rectangle" 'function)) :void
  (surface :pointer)
  (x :int)
  (y :int)
  (width :int)
  (height :int))

(cl:export '#.(swig-lispify "cairo_surface_mark_dirty_rectangle" 'function))

(cffi:defcfun ("cairo_surface_set_device_scale" #.(swig-lispify "cairo_surface_set_device_scale" 'function)) :void
  (surface :pointer)
  (x_scale :double)
  (y_scale :double))

(cl:export '#.(swig-lispify "cairo_surface_set_device_scale" 'function))

(cffi:defcfun ("cairo_surface_get_device_scale" #.(swig-lispify "cairo_surface_get_device_scale" 'function)) :void
  (surface :pointer)
  (x_scale :pointer)
  (y_scale :pointer))

(cl:export '#.(swig-lispify "cairo_surface_get_device_scale" 'function))

(cffi:defcfun ("cairo_surface_set_device_offset" #.(swig-lispify "cairo_surface_set_device_offset" 'function)) :void
  (surface :pointer)
  (x_offset :double)
  (y_offset :double))

(cl:export '#.(swig-lispify "cairo_surface_set_device_offset" 'function))

(cffi:defcfun ("cairo_surface_get_device_offset" #.(swig-lispify "cairo_surface_get_device_offset" 'function)) :void
  (surface :pointer)
  (x_offset :pointer)
  (y_offset :pointer))

(cl:export '#.(swig-lispify "cairo_surface_get_device_offset" 'function))

(cffi:defcfun ("cairo_surface_set_fallback_resolution" #.(swig-lispify "cairo_surface_set_fallback_resolution" 'function)) :void
  (surface :pointer)
  (x_pixels_per_inch :double)
  (y_pixels_per_inch :double))

(cl:export '#.(swig-lispify "cairo_surface_set_fallback_resolution" 'function))

(cffi:defcfun ("cairo_surface_get_fallback_resolution" #.(swig-lispify "cairo_surface_get_fallback_resolution" 'function)) :void
  (surface :pointer)
  (x_pixels_per_inch :pointer)
  (y_pixels_per_inch :pointer))

(cl:export '#.(swig-lispify "cairo_surface_get_fallback_resolution" 'function))

(cffi:defcfun ("cairo_surface_copy_page" #.(swig-lispify "cairo_surface_copy_page" 'function)) :void
  (surface :pointer))

(cl:export '#.(swig-lispify "cairo_surface_copy_page" 'function))

(cffi:defcfun ("cairo_surface_show_page" #.(swig-lispify "cairo_surface_show_page" 'function)) :void
  (surface :pointer))

(cl:export '#.(swig-lispify "cairo_surface_show_page" 'function))

(cffi:defcfun ("cairo_surface_has_show_text_glyphs" #.(swig-lispify "cairo_surface_has_show_text_glyphs" 'function)) :int
  (surface :pointer))

(cl:export '#.(swig-lispify "cairo_surface_has_show_text_glyphs" 'function))

(cffi:defcfun ("cairo_image_surface_create" #.(swig-lispify "cairo_image_surface_create" 'function)) :pointer
  (format #.(swig-lispify "cairo_format_t" 'enumname))
  (width :int)
  (height :int))

(cl:export '#.(swig-lispify "cairo_image_surface_create" 'function))

(cffi:defcfun ("cairo_format_stride_for_width" #.(swig-lispify "cairo_format_stride_for_width" 'function)) :int
  (format #.(swig-lispify "cairo_format_t" 'enumname))
  (width :int))

(cl:export '#.(swig-lispify "cairo_format_stride_for_width" 'function))

(cffi:defcfun ("cairo_image_surface_create_for_data" #.(swig-lispify "cairo_image_surface_create_for_data" 'function)) :pointer
  (data :pointer)
  (format #.(swig-lispify "cairo_format_t" 'enumname))
  (width :int)
  (height :int)
  (stride :int))

(cl:export '#.(swig-lispify "cairo_image_surface_create_for_data" 'function))

(cffi:defcfun ("cairo_image_surface_get_data" #.(swig-lispify "cairo_image_surface_get_data" 'function)) :pointer
  (surface :pointer))

(cl:export '#.(swig-lispify "cairo_image_surface_get_data" 'function))

(cffi:defcfun ("cairo_image_surface_get_format" #.(swig-lispify "cairo_image_surface_get_format" 'function)) #.(swig-lispify "cairo_format_t" 'enumname)
  (surface :pointer))

(cl:export '#.(swig-lispify "cairo_image_surface_get_format" 'function))

(cffi:defcfun ("cairo_image_surface_get_width" #.(swig-lispify "cairo_image_surface_get_width" 'function)) :int
  (surface :pointer))

(cl:export '#.(swig-lispify "cairo_image_surface_get_width" 'function))

(cffi:defcfun ("cairo_image_surface_get_height" #.(swig-lispify "cairo_image_surface_get_height" 'function)) :int
  (surface :pointer))

(cl:export '#.(swig-lispify "cairo_image_surface_get_height" 'function))

(cffi:defcfun ("cairo_image_surface_get_stride" #.(swig-lispify "cairo_image_surface_get_stride" 'function)) :int
  (surface :pointer))

(cl:export '#.(swig-lispify "cairo_image_surface_get_stride" 'function))

(cffi:defcfun ("cairo_image_surface_create_from_png" #.(swig-lispify "cairo_image_surface_create_from_png" 'function)) :pointer
  (filename :string))

(cl:export '#.(swig-lispify "cairo_image_surface_create_from_png" 'function))

(cffi:defcfun ("cairo_image_surface_create_from_png_stream" #.(swig-lispify "cairo_image_surface_create_from_png_stream" 'function)) :pointer
  (read_func :pointer)
  (closure :pointer))

(cl:export '#.(swig-lispify "cairo_image_surface_create_from_png_stream" 'function))

(cffi:defcfun ("cairo_recording_surface_create" #.(swig-lispify "cairo_recording_surface_create" 'function)) :pointer
  (content #.(swig-lispify "cairo_content_t" 'enumname))
  (extents :pointer))

(cl:export '#.(swig-lispify "cairo_recording_surface_create" 'function))

(cffi:defcfun ("cairo_recording_surface_ink_extents" #.(swig-lispify "cairo_recording_surface_ink_extents" 'function)) :void
  (surface :pointer)
  (x0 :pointer)
  (y0 :pointer)
  (width :pointer)
  (height :pointer))

(cl:export '#.(swig-lispify "cairo_recording_surface_ink_extents" 'function))

(cffi:defcfun ("cairo_recording_surface_get_extents" #.(swig-lispify "cairo_recording_surface_get_extents" 'function)) :int
  (surface :pointer)
  (extents :pointer))

(cl:export '#.(swig-lispify "cairo_recording_surface_get_extents" 'function))

(cffi:defcfun ("cairo_pattern_create_raster_source" #.(swig-lispify "cairo_pattern_create_raster_source" 'function)) :pointer
  (user_data :pointer)
  (content #.(swig-lispify "cairo_content_t" 'enumname))
  (width :int)
  (height :int))

(cl:export '#.(swig-lispify "cairo_pattern_create_raster_source" 'function))

(cffi:defcfun ("cairo_raster_source_pattern_set_callback_data" #.(swig-lispify "cairo_raster_source_pattern_set_callback_data" 'function)) :void
  (pattern :pointer)
  (data :pointer))

(cl:export '#.(swig-lispify "cairo_raster_source_pattern_set_callback_data" 'function))

(cffi:defcfun ("cairo_raster_source_pattern_get_callback_data" #.(swig-lispify "cairo_raster_source_pattern_get_callback_data" 'function)) :pointer
  (pattern :pointer))

(cl:export '#.(swig-lispify "cairo_raster_source_pattern_get_callback_data" 'function))

(cffi:defcfun ("cairo_raster_source_pattern_set_acquire" #.(swig-lispify "cairo_raster_source_pattern_set_acquire" 'function)) :void
  (pattern :pointer)
  (acquire :pointer)
  (release :pointer))

(cl:export '#.(swig-lispify "cairo_raster_source_pattern_set_acquire" 'function))

(cffi:defcfun ("cairo_raster_source_pattern_get_acquire" #.(swig-lispify "cairo_raster_source_pattern_get_acquire" 'function)) :void
  (pattern :pointer)
  (acquire :pointer)
  (release :pointer))

(cl:export '#.(swig-lispify "cairo_raster_source_pattern_get_acquire" 'function))

(cffi:defcfun ("cairo_raster_source_pattern_set_snapshot" #.(swig-lispify "cairo_raster_source_pattern_set_snapshot" 'function)) :void
  (pattern :pointer)
  (snapshot :pointer))

(cl:export '#.(swig-lispify "cairo_raster_source_pattern_set_snapshot" 'function))

(cffi:defcfun ("cairo_raster_source_pattern_get_snapshot" #.(swig-lispify "cairo_raster_source_pattern_get_snapshot" 'function)) :pointer
  (pattern :pointer))

(cl:export '#.(swig-lispify "cairo_raster_source_pattern_get_snapshot" 'function))

(cffi:defcfun ("cairo_raster_source_pattern_set_copy" #.(swig-lispify "cairo_raster_source_pattern_set_copy" 'function)) :void
  (pattern :pointer)
  (copy :pointer))

(cl:export '#.(swig-lispify "cairo_raster_source_pattern_set_copy" 'function))

(cffi:defcfun ("cairo_raster_source_pattern_get_copy" #.(swig-lispify "cairo_raster_source_pattern_get_copy" 'function)) :pointer
  (pattern :pointer))

(cl:export '#.(swig-lispify "cairo_raster_source_pattern_get_copy" 'function))

(cffi:defcfun ("cairo_raster_source_pattern_set_finish" #.(swig-lispify "cairo_raster_source_pattern_set_finish" 'function)) :void
  (pattern :pointer)
  (finish :pointer))

(cl:export '#.(swig-lispify "cairo_raster_source_pattern_set_finish" 'function))

(cffi:defcfun ("cairo_raster_source_pattern_get_finish" #.(swig-lispify "cairo_raster_source_pattern_get_finish" 'function)) :pointer
  (pattern :pointer))

(cl:export '#.(swig-lispify "cairo_raster_source_pattern_get_finish" 'function))

(cffi:defcfun ("cairo_pattern_create_rgb" #.(swig-lispify "cairo_pattern_create_rgb" 'function)) :pointer
  (red :double)
  (green :double)
  (blue :double))

(cl:export '#.(swig-lispify "cairo_pattern_create_rgb" 'function))

(cffi:defcfun ("cairo_pattern_create_rgba" #.(swig-lispify "cairo_pattern_create_rgba" 'function)) :pointer
  (red :double)
  (green :double)
  (blue :double)
  (alpha :double))

(cl:export '#.(swig-lispify "cairo_pattern_create_rgba" 'function))

(cffi:defcfun ("cairo_pattern_create_for_surface" #.(swig-lispify "cairo_pattern_create_for_surface" 'function)) :pointer
  (surface :pointer))

(cl:export '#.(swig-lispify "cairo_pattern_create_for_surface" 'function))

(cffi:defcfun ("cairo_pattern_create_linear" #.(swig-lispify "cairo_pattern_create_linear" 'function)) :pointer
  (x0 :double)
  (y0 :double)
  (x1 :double)
  (y1 :double))

(cl:export '#.(swig-lispify "cairo_pattern_create_linear" 'function))

(cffi:defcfun ("cairo_pattern_create_radial" #.(swig-lispify "cairo_pattern_create_radial" 'function)) :pointer
  (cx0 :double)
  (cy0 :double)
  (radius0 :double)
  (cx1 :double)
  (cy1 :double)
  (radius1 :double))

(cl:export '#.(swig-lispify "cairo_pattern_create_radial" 'function))

(cffi:defcfun ("cairo_pattern_create_mesh" #.(swig-lispify "cairo_pattern_create_mesh" 'function)) :pointer)

(cl:export '#.(swig-lispify "cairo_pattern_create_mesh" 'function))

(cffi:defcfun ("cairo_pattern_reference" #.(swig-lispify "cairo_pattern_reference" 'function)) :pointer
  (pattern :pointer))

(cl:export '#.(swig-lispify "cairo_pattern_reference" 'function))

(cffi:defcfun ("cairo_pattern_destroy" #.(swig-lispify "cairo_pattern_destroy" 'function)) :void
  (pattern :pointer))

(cl:export '#.(swig-lispify "cairo_pattern_destroy" 'function))

(cffi:defcfun ("cairo_pattern_get_reference_count" #.(swig-lispify "cairo_pattern_get_reference_count" 'function)) :unsigned-int
  (pattern :pointer))

(cl:export '#.(swig-lispify "cairo_pattern_get_reference_count" 'function))

(cffi:defcfun ("cairo_pattern_status" #.(swig-lispify "cairo_pattern_status" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (pattern :pointer))

(cl:export '#.(swig-lispify "cairo_pattern_status" 'function))

(cffi:defcfun ("cairo_pattern_get_user_data" #.(swig-lispify "cairo_pattern_get_user_data" 'function)) :pointer
  (pattern :pointer)
  (key :pointer))

(cl:export '#.(swig-lispify "cairo_pattern_get_user_data" 'function))

(cffi:defcfun ("cairo_pattern_set_user_data" #.(swig-lispify "cairo_pattern_set_user_data" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (pattern :pointer)
  (key :pointer)
  (user_data :pointer)
  (destroy :pointer))

(cl:export '#.(swig-lispify "cairo_pattern_set_user_data" 'function))

(cffi:defcenum #.(swig-lispify "cairo_pattern_type_t" 'enumname)
	#.(swig-lispify "CAIRO_PATTERN_TYPE_SOLID" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_PATTERN_TYPE_SURFACE" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_PATTERN_TYPE_LINEAR" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_PATTERN_TYPE_RADIAL" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_PATTERN_TYPE_MESH" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_PATTERN_TYPE_RASTER_SOURCE" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "cairo_pattern_type_t" 'enumname))

(cffi:defcfun ("cairo_pattern_get_type" #.(swig-lispify "cairo_pattern_get_type" 'function)) #.(swig-lispify "cairo_pattern_type_t" 'enumname)
  (pattern :pointer))

(cl:export '#.(swig-lispify "cairo_pattern_get_type" 'function))

(cffi:defcfun ("cairo_pattern_add_color_stop_rgb" #.(swig-lispify "cairo_pattern_add_color_stop_rgb" 'function)) :void
  (pattern :pointer)
  (offset :double)
  (red :double)
  (green :double)
  (blue :double))

(cl:export '#.(swig-lispify "cairo_pattern_add_color_stop_rgb" 'function))

(cffi:defcfun ("cairo_pattern_add_color_stop_rgba" #.(swig-lispify "cairo_pattern_add_color_stop_rgba" 'function)) :void
  (pattern :pointer)
  (offset :double)
  (red :double)
  (green :double)
  (blue :double)
  (alpha :double))

(cl:export '#.(swig-lispify "cairo_pattern_add_color_stop_rgba" 'function))

(cffi:defcfun ("cairo_mesh_pattern_begin_patch" #.(swig-lispify "cairo_mesh_pattern_begin_patch" 'function)) :void
  (pattern :pointer))

(cl:export '#.(swig-lispify "cairo_mesh_pattern_begin_patch" 'function))

(cffi:defcfun ("cairo_mesh_pattern_end_patch" #.(swig-lispify "cairo_mesh_pattern_end_patch" 'function)) :void
  (pattern :pointer))

(cl:export '#.(swig-lispify "cairo_mesh_pattern_end_patch" 'function))

(cffi:defcfun ("cairo_mesh_pattern_curve_to" #.(swig-lispify "cairo_mesh_pattern_curve_to" 'function)) :void
  (pattern :pointer)
  (x1 :double)
  (y1 :double)
  (x2 :double)
  (y2 :double)
  (x3 :double)
  (y3 :double))

(cl:export '#.(swig-lispify "cairo_mesh_pattern_curve_to" 'function))

(cffi:defcfun ("cairo_mesh_pattern_line_to" #.(swig-lispify "cairo_mesh_pattern_line_to" 'function)) :void
  (pattern :pointer)
  (x :double)
  (y :double))

(cl:export '#.(swig-lispify "cairo_mesh_pattern_line_to" 'function))

(cffi:defcfun ("cairo_mesh_pattern_move_to" #.(swig-lispify "cairo_mesh_pattern_move_to" 'function)) :void
  (pattern :pointer)
  (x :double)
  (y :double))

(cl:export '#.(swig-lispify "cairo_mesh_pattern_move_to" 'function))

(cffi:defcfun ("cairo_mesh_pattern_set_control_point" #.(swig-lispify "cairo_mesh_pattern_set_control_point" 'function)) :void
  (pattern :pointer)
  (point_num :unsigned-int)
  (x :double)
  (y :double))

(cl:export '#.(swig-lispify "cairo_mesh_pattern_set_control_point" 'function))

(cffi:defcfun ("cairo_mesh_pattern_set_corner_color_rgb" #.(swig-lispify "cairo_mesh_pattern_set_corner_color_rgb" 'function)) :void
  (pattern :pointer)
  (corner_num :unsigned-int)
  (red :double)
  (green :double)
  (blue :double))

(cl:export '#.(swig-lispify "cairo_mesh_pattern_set_corner_color_rgb" 'function))

(cffi:defcfun ("cairo_mesh_pattern_set_corner_color_rgba" #.(swig-lispify "cairo_mesh_pattern_set_corner_color_rgba" 'function)) :void
  (pattern :pointer)
  (corner_num :unsigned-int)
  (red :double)
  (green :double)
  (blue :double)
  (alpha :double))

(cl:export '#.(swig-lispify "cairo_mesh_pattern_set_corner_color_rgba" 'function))

(cffi:defcfun ("cairo_pattern_set_matrix" #.(swig-lispify "cairo_pattern_set_matrix" 'function)) :void
  (pattern :pointer)
  (matrix :pointer))

(cl:export '#.(swig-lispify "cairo_pattern_set_matrix" 'function))

(cffi:defcfun ("cairo_pattern_get_matrix" #.(swig-lispify "cairo_pattern_get_matrix" 'function)) :void
  (pattern :pointer)
  (matrix :pointer))

(cl:export '#.(swig-lispify "cairo_pattern_get_matrix" 'function))

(cffi:defcenum #.(swig-lispify "cairo_extend_t" 'enumname)
	#.(swig-lispify "CAIRO_EXTEND_NONE" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_EXTEND_REPEAT" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_EXTEND_REFLECT" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_EXTEND_PAD" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "cairo_extend_t" 'enumname))

(cffi:defcfun ("cairo_pattern_set_extend" #.(swig-lispify "cairo_pattern_set_extend" 'function)) :void
  (pattern :pointer)
  (extend #.(swig-lispify "cairo_extend_t" 'enumname)))

(cl:export '#.(swig-lispify "cairo_pattern_set_extend" 'function))

(cffi:defcfun ("cairo_pattern_get_extend" #.(swig-lispify "cairo_pattern_get_extend" 'function)) #.(swig-lispify "cairo_extend_t" 'enumname)
  (pattern :pointer))

(cl:export '#.(swig-lispify "cairo_pattern_get_extend" 'function))

(cffi:defcenum #.(swig-lispify "cairo_filter_t" 'enumname)
	#.(swig-lispify "CAIRO_FILTER_FAST" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_FILTER_GOOD" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_FILTER_BEST" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_FILTER_NEAREST" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_FILTER_BILINEAR" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_FILTER_GAUSSIAN" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "cairo_filter_t" 'enumname))

(cffi:defcfun ("cairo_pattern_set_filter" #.(swig-lispify "cairo_pattern_set_filter" 'function)) :void
  (pattern :pointer)
  (filter #.(swig-lispify "cairo_filter_t" 'enumname)))

(cl:export '#.(swig-lispify "cairo_pattern_set_filter" 'function))

(cffi:defcfun ("cairo_pattern_get_filter" #.(swig-lispify "cairo_pattern_get_filter" 'function)) #.(swig-lispify "cairo_filter_t" 'enumname)
  (pattern :pointer))

(cl:export '#.(swig-lispify "cairo_pattern_get_filter" 'function))

(cffi:defcfun ("cairo_pattern_get_rgba" #.(swig-lispify "cairo_pattern_get_rgba" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (pattern :pointer)
  (red :pointer)
  (green :pointer)
  (blue :pointer)
  (alpha :pointer))

(cl:export '#.(swig-lispify "cairo_pattern_get_rgba" 'function))

(cffi:defcfun ("cairo_pattern_get_surface" #.(swig-lispify "cairo_pattern_get_surface" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (pattern :pointer)
  (surface :pointer))

(cl:export '#.(swig-lispify "cairo_pattern_get_surface" 'function))

(cffi:defcfun ("cairo_pattern_get_color_stop_rgba" #.(swig-lispify "cairo_pattern_get_color_stop_rgba" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (pattern :pointer)
  (index :int)
  (offset :pointer)
  (red :pointer)
  (green :pointer)
  (blue :pointer)
  (alpha :pointer))

(cl:export '#.(swig-lispify "cairo_pattern_get_color_stop_rgba" 'function))

(cffi:defcfun ("cairo_pattern_get_color_stop_count" #.(swig-lispify "cairo_pattern_get_color_stop_count" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (pattern :pointer)
  (count :pointer))

(cl:export '#.(swig-lispify "cairo_pattern_get_color_stop_count" 'function))

(cffi:defcfun ("cairo_pattern_get_linear_points" #.(swig-lispify "cairo_pattern_get_linear_points" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (pattern :pointer)
  (x0 :pointer)
  (y0 :pointer)
  (x1 :pointer)
  (y1 :pointer))

(cl:export '#.(swig-lispify "cairo_pattern_get_linear_points" 'function))

(cffi:defcfun ("cairo_pattern_get_radial_circles" #.(swig-lispify "cairo_pattern_get_radial_circles" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (pattern :pointer)
  (x0 :pointer)
  (y0 :pointer)
  (r0 :pointer)
  (x1 :pointer)
  (y1 :pointer)
  (r1 :pointer))

(cl:export '#.(swig-lispify "cairo_pattern_get_radial_circles" 'function))

(cffi:defcfun ("cairo_mesh_pattern_get_patch_count" #.(swig-lispify "cairo_mesh_pattern_get_patch_count" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (pattern :pointer)
  (count :pointer))

(cl:export '#.(swig-lispify "cairo_mesh_pattern_get_patch_count" 'function))

(cffi:defcfun ("cairo_mesh_pattern_get_path" #.(swig-lispify "cairo_mesh_pattern_get_path" 'function)) :pointer
  (pattern :pointer)
  (patch_num :unsigned-int))

(cl:export '#.(swig-lispify "cairo_mesh_pattern_get_path" 'function))

(cffi:defcfun ("cairo_mesh_pattern_get_corner_color_rgba" #.(swig-lispify "cairo_mesh_pattern_get_corner_color_rgba" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (pattern :pointer)
  (patch_num :unsigned-int)
  (corner_num :unsigned-int)
  (red :pointer)
  (green :pointer)
  (blue :pointer)
  (alpha :pointer))

(cl:export '#.(swig-lispify "cairo_mesh_pattern_get_corner_color_rgba" 'function))

(cffi:defcfun ("cairo_mesh_pattern_get_control_point" #.(swig-lispify "cairo_mesh_pattern_get_control_point" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (pattern :pointer)
  (patch_num :unsigned-int)
  (point_num :unsigned-int)
  (x :pointer)
  (y :pointer))

(cl:export '#.(swig-lispify "cairo_mesh_pattern_get_control_point" 'function))

(cffi:defcfun ("cairo_matrix_init" #.(swig-lispify "cairo_matrix_init" 'function)) :void
  (matrix :pointer)
  (xx :double)
  (yx :double)
  (xy :double)
  (yy :double)
  (x0 :double)
  (y0 :double))

(cl:export '#.(swig-lispify "cairo_matrix_init" 'function))

(cffi:defcfun ("cairo_matrix_init_identity" #.(swig-lispify "cairo_matrix_init_identity" 'function)) :void
  (matrix :pointer))

(cl:export '#.(swig-lispify "cairo_matrix_init_identity" 'function))

(cffi:defcfun ("cairo_matrix_init_translate" #.(swig-lispify "cairo_matrix_init_translate" 'function)) :void
  (matrix :pointer)
  (tx :double)
  (ty :double))

(cl:export '#.(swig-lispify "cairo_matrix_init_translate" 'function))

(cffi:defcfun ("cairo_matrix_init_scale" #.(swig-lispify "cairo_matrix_init_scale" 'function)) :void
  (matrix :pointer)
  (sx :double)
  (sy :double))

(cl:export '#.(swig-lispify "cairo_matrix_init_scale" 'function))

(cffi:defcfun ("cairo_matrix_init_rotate" #.(swig-lispify "cairo_matrix_init_rotate" 'function)) :void
  (matrix :pointer)
  (radians :double))

(cl:export '#.(swig-lispify "cairo_matrix_init_rotate" 'function))

(cffi:defcfun ("cairo_matrix_translate" #.(swig-lispify "cairo_matrix_translate" 'function)) :void
  (matrix :pointer)
  (tx :double)
  (ty :double))

(cl:export '#.(swig-lispify "cairo_matrix_translate" 'function))

(cffi:defcfun ("cairo_matrix_scale" #.(swig-lispify "cairo_matrix_scale" 'function)) :void
  (matrix :pointer)
  (sx :double)
  (sy :double))

(cl:export '#.(swig-lispify "cairo_matrix_scale" 'function))

(cffi:defcfun ("cairo_matrix_rotate" #.(swig-lispify "cairo_matrix_rotate" 'function)) :void
  (matrix :pointer)
  (radians :double))

(cl:export '#.(swig-lispify "cairo_matrix_rotate" 'function))

(cffi:defcfun ("cairo_matrix_invert" #.(swig-lispify "cairo_matrix_invert" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (matrix :pointer))

(cl:export '#.(swig-lispify "cairo_matrix_invert" 'function))

(cffi:defcfun ("cairo_matrix_multiply" #.(swig-lispify "cairo_matrix_multiply" 'function)) :void
  (result :pointer)
  (a :pointer)
  (b :pointer))

(cl:export '#.(swig-lispify "cairo_matrix_multiply" 'function))

(cffi:defcfun ("cairo_matrix_transform_distance" #.(swig-lispify "cairo_matrix_transform_distance" 'function)) :void
  (matrix :pointer)
  (dx :pointer)
  (dy :pointer))

(cl:export '#.(swig-lispify "cairo_matrix_transform_distance" 'function))

(cffi:defcfun ("cairo_matrix_transform_point" #.(swig-lispify "cairo_matrix_transform_point" 'function)) :void
  (matrix :pointer)
  (x :pointer)
  (y :pointer))

(cl:export '#.(swig-lispify "cairo_matrix_transform_point" 'function))

(cffi:defcenum #.(swig-lispify "cairo_region_overlap_t" 'enumname)
	#.(swig-lispify "CAIRO_REGION_OVERLAP_IN" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_REGION_OVERLAP_OUT" 'enumvalue :keyword)
	#.(swig-lispify "CAIRO_REGION_OVERLAP_PART" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "cairo_region_overlap_t" 'enumname))

(cffi:defcfun ("cairo_region_create" #.(swig-lispify "cairo_region_create" 'function)) :pointer)

(cl:export '#.(swig-lispify "cairo_region_create" 'function))

(cffi:defcfun ("cairo_region_create_rectangle" #.(swig-lispify "cairo_region_create_rectangle" 'function)) :pointer
  (rectangle :pointer))

(cl:export '#.(swig-lispify "cairo_region_create_rectangle" 'function))

(cffi:defcfun ("cairo_region_create_rectangles" #.(swig-lispify "cairo_region_create_rectangles" 'function)) :pointer
  (rects :pointer)
  (count :int))

(cl:export '#.(swig-lispify "cairo_region_create_rectangles" 'function))

(cffi:defcfun ("cairo_region_copy" #.(swig-lispify "cairo_region_copy" 'function)) :pointer
  (original :pointer))

(cl:export '#.(swig-lispify "cairo_region_copy" 'function))

(cffi:defcfun ("cairo_region_reference" #.(swig-lispify "cairo_region_reference" 'function)) :pointer
  (region :pointer))

(cl:export '#.(swig-lispify "cairo_region_reference" 'function))

(cffi:defcfun ("cairo_region_destroy" #.(swig-lispify "cairo_region_destroy" 'function)) :void
  (region :pointer))

(cl:export '#.(swig-lispify "cairo_region_destroy" 'function))

(cffi:defcfun ("cairo_region_equal" #.(swig-lispify "cairo_region_equal" 'function)) :int
  (a :pointer)
  (b :pointer))

(cl:export '#.(swig-lispify "cairo_region_equal" 'function))

(cffi:defcfun ("cairo_region_status" #.(swig-lispify "cairo_region_status" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (region :pointer))

(cl:export '#.(swig-lispify "cairo_region_status" 'function))

(cffi:defcfun ("cairo_region_get_extents" #.(swig-lispify "cairo_region_get_extents" 'function)) :void
  (region :pointer)
  (extents :pointer))

(cl:export '#.(swig-lispify "cairo_region_get_extents" 'function))

(cffi:defcfun ("cairo_region_num_rectangles" #.(swig-lispify "cairo_region_num_rectangles" 'function)) :int
  (region :pointer))

(cl:export '#.(swig-lispify "cairo_region_num_rectangles" 'function))

(cffi:defcfun ("cairo_region_get_rectangle" #.(swig-lispify "cairo_region_get_rectangle" 'function)) :void
  (region :pointer)
  (nth :int)
  (rectangle :pointer))

(cl:export '#.(swig-lispify "cairo_region_get_rectangle" 'function))

(cffi:defcfun ("cairo_region_is_empty" #.(swig-lispify "cairo_region_is_empty" 'function)) :int
  (region :pointer))

(cl:export '#.(swig-lispify "cairo_region_is_empty" 'function))

(cffi:defcfun ("cairo_region_contains_rectangle" #.(swig-lispify "cairo_region_contains_rectangle" 'function)) #.(swig-lispify "cairo_region_overlap_t" 'enumname)
  (region :pointer)
  (rectangle :pointer))

(cl:export '#.(swig-lispify "cairo_region_contains_rectangle" 'function))

(cffi:defcfun ("cairo_region_contains_point" #.(swig-lispify "cairo_region_contains_point" 'function)) :int
  (region :pointer)
  (x :int)
  (y :int))

(cl:export '#.(swig-lispify "cairo_region_contains_point" 'function))

(cffi:defcfun ("cairo_region_translate" #.(swig-lispify "cairo_region_translate" 'function)) :void
  (region :pointer)
  (dx :int)
  (dy :int))

(cl:export '#.(swig-lispify "cairo_region_translate" 'function))

(cffi:defcfun ("cairo_region_subtract" #.(swig-lispify "cairo_region_subtract" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (dst :pointer)
  (other :pointer))

(cl:export '#.(swig-lispify "cairo_region_subtract" 'function))

(cffi:defcfun ("cairo_region_subtract_rectangle" #.(swig-lispify "cairo_region_subtract_rectangle" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (dst :pointer)
  (rectangle :pointer))

(cl:export '#.(swig-lispify "cairo_region_subtract_rectangle" 'function))

(cffi:defcfun ("cairo_region_intersect" #.(swig-lispify "cairo_region_intersect" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (dst :pointer)
  (other :pointer))

(cl:export '#.(swig-lispify "cairo_region_intersect" 'function))

(cffi:defcfun ("cairo_region_intersect_rectangle" #.(swig-lispify "cairo_region_intersect_rectangle" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (dst :pointer)
  (rectangle :pointer))

(cl:export '#.(swig-lispify "cairo_region_intersect_rectangle" 'function))

(cffi:defcfun ("cairo_region_union" #.(swig-lispify "cairo_region_union" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (dst :pointer)
  (other :pointer))

(cl:export '#.(swig-lispify "cairo_region_union" 'function))

(cffi:defcfun ("cairo_region_union_rectangle" #.(swig-lispify "cairo_region_union_rectangle" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (dst :pointer)
  (rectangle :pointer))

(cl:export '#.(swig-lispify "cairo_region_union_rectangle" 'function))

(cffi:defcfun ("cairo_region_xor" #.(swig-lispify "cairo_region_xor" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (dst :pointer)
  (other :pointer))

(cl:export '#.(swig-lispify "cairo_region_xor" 'function))

(cffi:defcfun ("cairo_region_xor_rectangle" #.(swig-lispify "cairo_region_xor_rectangle" 'function)) #.(swig-lispify "cairo_status_t" 'enumname)
  (dst :pointer)
  (rectangle :pointer))

(cl:export '#.(swig-lispify "cairo_region_xor_rectangle" 'function))

(cffi:defcfun ("cairo_debug_reset_static_data" #.(swig-lispify "cairo_debug_reset_static_data" 'function)) :void)

(cl:export '#.(swig-lispify "cairo_debug_reset_static_data" 'function))


